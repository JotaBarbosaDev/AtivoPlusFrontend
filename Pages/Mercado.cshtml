@page
@model AtivoPlusFrontend.Pages.MercadoModel
@{
    ViewData["Title"] = "Mercado";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-950 pt-20">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        <!-- Header Section -->
        <div class="text-center mb-12">
            <h1
                class="text-4xl font-bold bg-gradient-to-r from-primary-400 to-blue-400 bg-clip-text text-transparent mb-4">
                Mercado Financeiro
            </h1>
            <p class="text-gray-400 text-lg max-w-2xl mx-auto">
                Acompanha os mercados em tempo real e descobre oportunidades de investimento
            </p>
        </div>

        <!-- Search Section -->
        <div class="relative max-w-2xl mx-auto mb-12">
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                </div>
                <input type="text" id="marketSymbolSearch" placeholder="Pesquisar símbolos (ex: AAPL, BTC, EDP.LS)..."
                    class="w-full pl-10 pr-4 py-3 bg-gray-900/50 border border-gray-700 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200" />
                <div id="marketSearchSpinner" class="hidden absolute inset-y-0 right-0 pr-3">
                    <div class="flex items-center">
                        <svg class="animate-spin h-5 w-5 text-primary-400" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                            </circle>
                            <path class="opacity-75" fill="currentColor"
                                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                            </path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Search Results -->
            <div id="marketSymbolSearchResults"
                class="hidden absolute z-50 w-full bg-gray-900 border border-gray-700 rounded-xl mt-2 shadow-2xl max-h-96 overflow-y-auto">
                <!-- Results will be populated here -->
            </div>
        </div>

        <!-- Market Sections -->
        <!-- Stocks Section -->
        <div class="mb-16">
            <div class="flex items-center gap-4 mb-8">
                <div
                    class="w-16 h-16 bg-gradient-to-r from-primary-600 to-blue-600 rounded-2xl flex items-center justify-center">
                    <svg class='w-8 h-8 text-white' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2'
                            d='M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z' />
                    </svg>
                </div>
                <div>
                    <h2 class="text-3xl font-bold text-white">Stocks</h2>
                    <p class="text-gray-400">Ações de empresas cotadas em bolsa</p>
                </div>
            </div>

            <div id="stocksContainer" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                <!-- Loading state -->
                <div class="col-span-full flex justify-center items-center py-12">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
                    <span class="ml-3 text-gray-400">Carregando stocks...</span>
                </div>
            </div>
        </div>

        <!-- ETFs Section -->
        <div class="mb-16">
            <div class="flex items-center gap-4 mb-8">
                <div
                    class="w-16 h-16 bg-gradient-to-r from-primary-600 to-blue-600 rounded-2xl flex items-center justify-center">
                    <svg class='w-8 h-8 text-white' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2'
                            d='M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z' />
                    </svg>
                </div>
                <div>
                    <h2 class="text-3xl font-bold text-white">ETFs</h2>
                    <p class="text-gray-400">Fundos negociados em bolsa diversificados</p>
                </div>
            </div>

            <div id="etfsContainer" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                <!-- Loading state -->
                <div class="col-span-full flex justify-center items-center py-12">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
                    <span class="ml-3 text-gray-400">Carregando ETFs...</span>
                </div>
            </div>
        </div>

        <!-- Crypto Section -->
        <div class="mb-16">
            <div class="flex items-center gap-4 mb-8">
                <div
                    class="w-16 h-16 bg-gradient-to-r from-primary-600 to-blue-600 rounded-2xl flex items-center justify-center">
                    <svg class='w-8 h-8 text-white' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2'
                            d='M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z' />
                    </svg>
                </div>
                <div>
                    <h2 class="text-3xl font-bold text-white">Crypto</h2>
                    <p class="text-gray-400">Criptomoedas e ativos digitais</p>
                </div>
            </div>

            <div id="cryptoContainer" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                <!-- Loading state -->
                <div class="col-span-full flex justify-center items-center py-12">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
                    <span class="ml-3 text-gray-400">Carregando crypto...</span>
                </div>
            </div>
        </div>

    </div>
</div>

<!-- Candlestick Chart Modal -->
<div id="candlestickModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div
        class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl p-6 shadow-2xl w-full max-w-6xl mx-4 max-h-[90vh] transform transition-all duration-300 flex flex-col">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 id="chartTitle" class="text-2xl font-bold text-white">Gráfico de Candles</h2>
                <p id="chartSubtitle" class="text-gray-400">Visualize os dados históricos do ativo</p>
            </div>
            <div class="flex flex-col items-end gap-3">
                <button id="fecharCandlestickModal" class="text-gray-400 hover:text-white transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
                <div class="flex items-center gap-4">
                    <!-- Interval Selector -->
                    <div class="flex items-center rounded-lg bg-gray-800 p-1">
                        <button id="interval1d"
                            class="px-3 py-1.5 rounded-md text-sm font-medium text-white bg-primary-600 transition-colors">1D</button>
                        <button id="interval1w"
                            class="px-3 py-1.5 rounded-md text-sm font-medium text-white transition-colors">1S</button>
                    </div>

                    <!-- Period Selector -->
                    <div class="flex items-center rounded-lg bg-gray-800 p-1">
                        <button id="period30"
                            class="px-3 py-1.5 rounded-md text-sm font-medium text-white bg-primary-600 transition-colors">30D</button>
                        <button id="period60"
                            class="px-3 py-1.5 rounded-md text-sm font-medium text-white transition-colors">60D</button>
                        <button id="period90"
                            class="px-3 py-1.5 rounded-md text-sm font-medium text-white transition-colors">90D</button>
                        <button id="period180"
                            class="px-3 py-1.5 rounded-md text-sm font-medium text-white transition-colors">6M</button>
                        <button id="period365"
                            class="px-3 py-1.5 rounded-md text-sm font-medium text-white transition-colors">1A</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chart Container -->
        <div class="flex-1 bg-gray-800/50 rounded-xl relative min-h-[400px] overflow-hidden">
            <div id="chartLoadingState" class="absolute inset-0 flex items-center justify-center">
                <div class="text-center">
                    <div
                        class="w-16 h-16 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mb-4">
                    </div>
                    <p class="text-gray-400">Carregando dados do gráfico...</p>
                </div>
            </div>
            <div id="chartErrorState" class="absolute inset-0 items-center justify-center hidden">
                <div class="text-center">
                    <div class="w-16 h-16 bg-red-500/10 rounded-full flex items-center justify-center mb-4">
                        <svg class="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                    </div>
                    <p class="text-red-400 font-semibold mb-2">Erro ao carregar gráfico</p>
                    <p class="text-gray-400 text-center max-w-md">Não foi possível carregar os dados do gráfico para
                        este
                        símbolo.</p>
                </div>
            </div>
            <div id="candlestickChart" class="w-full h-full hidden"></div>
        </div>
    </div>
</div>

<script>
    // Market search functionality - based on fundosInvestimento.js
    let marketSearchTimeout = null;

    // Setup event listeners when DOM is loaded
    document.addEventListener('DOMContentLoaded', function () {
        const marketSymbolInput = document.getElementById('marketSymbolSearch');

        if (marketSymbolInput) {
            marketSymbolInput.addEventListener('input', handleMarketSymbolSearch);
            marketSymbolInput.addEventListener('focus', handleMarketSymbolFocus);
            marketSymbolInput.addEventListener('blur', handleMarketSymbolBlur);
        }
    });

    /**
     * Handle market symbol search input
     */
    function handleMarketSymbolSearch(e) {
        const query = e.target.value.trim();

        // Clear previous timeout
        if (marketSearchTimeout) {
            clearTimeout(marketSearchTimeout);
        }

        // Hide results if query is too short
        if (query.length < 2) {
            hideMarketSymbolSearchResults();
            return;
        }

        // Show spinner
        showMarketSearchSpinner(true);

        // Debounce the search
        marketSearchTimeout = setTimeout(() => {
            searchMarketSymbols(query);
        }, 300);
    }

    /**
     * Handle market symbol input focus
     */
    function handleMarketSymbolFocus(e) {
        const query = e.target.value.trim();
        if (query.length >= 2) {
            const searchResults = document.getElementById('marketSymbolSearchResults');
            if (searchResults && !searchResults.classList.contains('hidden')) {
                searchResults.classList.remove('hidden');
            }
        }
    }

    /**
     * Handle market symbol input blur with delay
     */
    function handleMarketSymbolBlur(e) {
        // Delay hiding to allow clicking on results
        setTimeout(() => {
            hideMarketSymbolSearchResults();
        }, 200);
    }

    /**
     * Search symbols using TwelveData API with fallback
     */
    async function searchMarketSymbols(query) {
        try {
            // First, try local symbol list
            const localResults = searchLocalMarketSymbols(query);
            if (localResults.length > 0) {
                showMarketSearchSpinner(false);
                displayMarketSymbolSearchResults(localResults);
                return;
            }

            // Try Twelve Data API
            try {
                const response = await fetch(`https://api.twelvedata.com/symbol_search?symbol=${encodeURIComponent(query)}&apikey=demo`);

                if (response.ok) {
                    const data = await response.json();
                    showMarketSearchSpinner(false);

                    if (data && data.data && Array.isArray(data.data)) {
                        displayMarketSymbolSearchResults(data.data);
                        return;
                    }
                }
            } catch (apiError) {
                console.warn('Twelve Data API not available, using fallback', apiError);
            }

            // Fallback: Generate suggestions based on query
            const fallbackResults = generateMarketFallbackSymbols(query);
            showMarketSearchSpinner(false);
            displayMarketSymbolSearchResults(fallbackResults);

        } catch (error) {
            console.error('Error searching market symbols:', error);
            showMarketSearchSpinner(false);
            displayMarketSymbolSearchResults([]);
        }
    }

    /**
     * Search local symbol database
     */
    function searchLocalMarketSymbols(query) {
        const commonSymbols = [
            // Portuguese stocks
            { symbol: 'EDP.LS', instrument_name: 'EDP - Energias de Portugal SA', exchange: 'Euronext Lisbon', currency: 'EUR', type: 'Stock' },
            { symbol: 'GALP.LS', instrument_name: 'Galp Energia SGPS SA', exchange: 'Euronext Lisbon', currency: 'EUR', type: 'Stock' },
            { symbol: 'BCP.LS', instrument_name: 'Banco Comercial Português SA', exchange: 'Euronext Lisbon', currency: 'EUR', type: 'Stock' },
            { symbol: 'SON.LS', instrument_name: 'Sonae SGPS SA', exchange: 'Euronext Lisbon', currency: 'EUR', type: 'Stock' },
            { symbol: 'JMT.LS', instrument_name: 'Jerónimo Martins SGPS SA', exchange: 'Euronext Lisbon', currency: 'EUR', type: 'Stock' },

            // Major US stocks
            { symbol: 'AAPL', instrument_name: 'Apple Inc', exchange: 'NASDAQ', currency: 'USD', type: 'Stock' },
            { symbol: 'MSFT', instrument_name: 'Microsoft Corporation', exchange: 'NASDAQ', currency: 'USD', type: 'Stock' },
            { symbol: 'GOOGL', instrument_name: 'Alphabet Inc Class A', exchange: 'NASDAQ', currency: 'USD', type: 'Stock' },
            { symbol: 'AMZN', instrument_name: 'Amazon.com Inc', exchange: 'NASDAQ', currency: 'USD', type: 'Stock' },
            { symbol: 'TSLA', instrument_name: 'Tesla Inc', exchange: 'NASDAQ', currency: 'USD', type: 'Stock' },
            { symbol: 'META', instrument_name: 'Meta Platforms Inc', exchange: 'NASDAQ', currency: 'USD', type: 'Stock' },
            { symbol: 'NVDA', instrument_name: 'NVIDIA Corporation', exchange: 'NASDAQ', currency: 'USD', type: 'Stock' },

            // European stocks
            { symbol: 'ASML.AS', instrument_name: 'ASML Holding NV', exchange: 'Euronext Amsterdam', currency: 'EUR', type: 'Stock' },
            { symbol: 'SAP.DE', instrument_name: 'SAP SE', exchange: 'XETRA', currency: 'EUR', type: 'Stock' },
            { symbol: 'NESN.SW', instrument_name: 'Nestlé SA', exchange: 'SIX Swiss Exchange', currency: 'CHF', type: 'Stock' },

            // Crypto
            { symbol: 'BTC/USD', instrument_name: 'Bitcoin', exchange: 'Crypto', currency: 'USD', type: 'Cryptocurrency' },
            { symbol: 'ETH/USD', instrument_name: 'Ethereum', exchange: 'Crypto', currency: 'USD', type: 'Cryptocurrency' },

            // ETFs
            { symbol: 'SPY', instrument_name: 'SPDR S&P 500 ETF Trust', exchange: 'NYSE Arca', currency: 'USD', type: 'ETF' },
            { symbol: 'QQQ', instrument_name: 'Invesco QQQ Trust', exchange: 'NASDAQ', currency: 'USD', type: 'ETF' },
            { symbol: 'VTI', instrument_name: 'Vanguard Total Stock Market ETF', exchange: 'NYSE Arca', currency: 'USD', type: 'ETF' }
        ];

        const queryLower = query.toLowerCase();
        return commonSymbols.filter(symbol =>
            symbol.symbol.toLowerCase().includes(queryLower) ||
            symbol.instrument_name.toLowerCase().includes(queryLower)
        );
    }

    /**
     * Generate fallback symbol suggestions
     */
    function generateMarketFallbackSymbols(query) {
        const queryUpper = query.toUpperCase();
        const suggestions = [];

        if (query.length >= 2) {
            // Add the query itself as a potential symbol
            suggestions.push({
                symbol: queryUpper,
                instrument_name: `${queryUpper} - Símbolo personalizado`,
                exchange: 'Manual',
                currency: 'EUR',
                type: 'Custom'
            });

            // Add some variations
            if (query.length <= 4) {
                suggestions.push({
                    symbol: `${queryUpper}.LS`,
                    instrument_name: `${queryUpper} - Euronext Lisboa`,
                    exchange: 'Euronext Lisbon',
                    currency: 'EUR',
                    type: 'Stock'
                });

                suggestions.push({
                    symbol: `${queryUpper}/USD`,
                    instrument_name: `${queryUpper} - Par de moedas`,
                    exchange: 'Forex',
                    currency: 'USD',
                    type: 'Currency'
                });
            }
        }

        return suggestions;
    }

    /**
     * Display market symbol search results
     */
    function displayMarketSymbolSearchResults(results) {
        const searchResultsContainer = document.getElementById('marketSymbolSearchResults');
        if (!searchResultsContainer) return;

        // Clear previous results
        searchResultsContainer.innerHTML = '';

        if (results.length === 0) {
            searchResultsContainer.innerHTML = `
            <div class="p-4 text-center text-gray-400">
                <svg class="w-8 h-8 mx-auto mb-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                Nenhum símbolo encontrado
                <div class="text-xs mt-1">Tente pesquisar por símbolos como AAPL, BTC, ou EDP.LS</div>
            </div>
        `;
            searchResultsContainer.classList.remove('hidden');
            return;
        }

        // Display results (limit to 10)
        const limitedResults = results.slice(0, 10);

        limitedResults.forEach((result, index) => {
            const resultItem = document.createElement('div');
            resultItem.className = 'p-3 hover:bg-gray-700 cursor-pointer border-b border-gray-700 last:border-b-0 transition-colors';

            // Get type color
            const typeColors = {
                'Stock': 'text-blue-400',
                'ETF': 'text-green-400',
                'Cryptocurrency': 'text-yellow-400',
                'Currency': 'text-purple-400',
                'Custom': 'text-gray-400'
            };

            const typeColor = typeColors[result.type] || 'text-gray-400';

            resultItem.innerHTML = `
            <div class="flex justify-between items-start">
                <div class="flex-1 min-w-0">
                    <div class="flex items-center gap-2">
                        <span class="font-semibold text-white">${result.symbol}</span>
                        ${result.type ? `<span class="text-xs px-2 py-1 rounded ${typeColor} bg-gray-800">${result.type}</span>` : ''}
                    </div>
                    <div class="text-sm text-gray-300 truncate mt-1">${result.instrument_name || 'N/A'}</div>
                    <div class="text-xs text-gray-400 mt-1">
                        ${result.exchange || 'N/A'} ${result.currency ? `• ${result.currency}` : ''}
                    </div>
                </div>
                <div class="flex-shrink-0 ml-2">
                    <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </div>
            </div>
        `;

            // Add click event
            resultItem.addEventListener('click', () => {
                selectMarketSymbol(result);
            });

            // Add keyboard navigation
            resultItem.setAttribute('data-index', index);
            resultItem.setAttribute('tabindex', '0');

            resultItem.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    selectMarketSymbol(result);
                }
            });

            searchResultsContainer.appendChild(resultItem);
        });

        searchResultsContainer.classList.remove('hidden');
    }

    /**
     * Current selected symbol data
     */
    let currentSymbolData = null;
    let currentChartInterval = '1day';
    let currentPeriod = 30; // Default to 30 days
    let candlestickChart = null;

    /**
     * Select a symbol from search results
     */
    function selectMarketSymbol(symbolData) {
        const marketSymbolInput = document.getElementById('marketSymbolSearch');

        if (marketSymbolInput) {
            marketSymbolInput.value = `${symbolData.symbol} - ${symbolData.instrument_name || symbolData.symbol}`;
        }

        // Store the selected symbol data
        currentSymbolData = symbolData;

        // Hide search results
        hideMarketSymbolSearchResults();

        // Show candlestick chart modal for this symbol
        openCandlestickModal(symbolData);
    }

    /**
     * Open candlestick chart modal
     */
    function openCandlestickModal(symbolData) {
        if (!symbolData) return;

        console.log('Opening modal for symbol:', symbolData.symbol);

        // Store the selected symbol data
        currentSymbolData = symbolData;

        const modal = document.getElementById('candlestickModal');
        const chartTitle = document.getElementById('chartTitle');
        const chartSubtitle = document.getElementById('chartSubtitle');

        if (!modal) return;

        // Set chart title and subtitle
        if (chartTitle) {
            chartTitle.textContent = symbolData.instrument_name || symbolData.symbol;
        }

        if (chartSubtitle) {
            chartSubtitle.textContent = `${symbolData.symbol} • ${symbolData.exchange || 'Exchange N/A'}`;
        }

        // Show modal
        modal.classList.remove('hidden');
        modal.classList.add('flex');

        // Load candlestick chart data
        console.log('Loading chart with interval:', currentChartInterval);
        loadCandlestickChart(symbolData.symbol, currentChartInterval);

        // Set up close modal button
        const closeButton = document.getElementById('fecharCandlestickModal');
        if (closeButton) {
            closeButton.addEventListener('click', closeCandlestickModal);
        }

        // Set up interval buttons
        setupIntervalButtons();

        // Ensure proper modal sizing after a brief delay
        setTimeout(() => {
            if (candlestickChart) {
                candlestickChart.updateOptions({}, false, true);
            }
        }, 200);
    }

    /**
     * Setup interval buttons for chart
     */
    function setupIntervalButtons() {
        console.log('Setting up interval buttons...');

        const intervals = [
            { id: 'interval1d', value: '1day' },
            { id: 'interval1w', value: '1week' }
        ];

        intervals.forEach(interval => {
            const button = document.getElementById(interval.id);
            if (button) {
                console.log('Setting up button:', interval.id, 'with value:', interval.value);

                // Remove all existing event listeners by cloning the node
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);

                // Add new event listener
                newButton.addEventListener('click', () => {
                    console.log('Button clicked:', interval.id, 'switching to interval:', interval.value);

                    // Update active button styling
                    intervals.forEach(i => {
                        const btn = document.getElementById(i.id);
                        if (btn) {
                            if (i.id === interval.id) {
                                btn.classList.add('bg-primary-600');
                            } else {
                                btn.classList.remove('bg-primary-600');
                            }
                        }
                    });

                    // Update chart with new interval
                    currentChartInterval = interval.value;
                    console.log('Interval changed to:', currentChartInterval, 'for symbol:', currentSymbolData?.symbol);
                    if (currentSymbolData) {
                        // Make sure to pass the new interval to the API request
                        loadCandlestickChart(currentSymbolData.symbol, interval.value);
                    }
                });
            } else {
                console.warn('Button not found:', interval.id);
            }
        });

        // Set up period buttons
        console.log('Setting up period buttons...');
        const periods = [
            { id: 'period30', days: 30 },
            { id: 'period60', days: 60 },
            { id: 'period90', days: 90 },
            { id: 'period180', days: 180 },
            { id: 'period365', days: 365 }
        ];

        periods.forEach(period => {
            const button = document.getElementById(period.id);
            if (button) {
                console.log('Setting up period button:', period.id, 'with days:', period.days);

                // Remove all existing event listeners by cloning the node
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);

                // Add new event listener
                newButton.addEventListener('click', () => {
                    console.log('Period button clicked:', period.id, 'switching to:', period.days, 'days');

                    // Update active button styling
                    periods.forEach(p => {
                        const btn = document.getElementById(p.id);
                        if (btn) {
                            if (p.id === period.id) {
                                btn.classList.add('bg-primary-600');
                            } else {
                                btn.classList.remove('bg-primary-600');
                            }
                        }
                    });

                    // Update chart with new period
                    currentPeriod = period.days;
                    console.log('Period changed to:', currentPeriod, 'days for symbol:', currentSymbolData?.symbol);
                    if (currentSymbolData) {
                        loadCandlestickChart(currentSymbolData.symbol, currentChartInterval);
                    }
                });
            } else {
                console.warn('Period button not found:', period.id);
            }
        });
    }

    /**
     * Close candlestick chart modal
     */
    function closeCandlestickModal() {
        const modal = document.getElementById('candlestickModal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }

        // Destroy chart instance to prevent memory leaks
        if (candlestickChart) {
            candlestickChart.destroy();
            candlestickChart = null;
        }
    }

    /**
     * Load candlestick chart data
     */
    async function loadCandlestickChart(symbol, interval = '1day') {
        console.log('loadCandlestickChart called with symbol:', symbol, 'interval:', interval, 'currentPeriod:', currentPeriod);

        // Store the current interval in the global variable
        currentChartInterval = interval;

        // Show loading state
        const chartLoadingState = document.getElementById('chartLoadingState');
        const chartErrorState = document.getElementById('chartErrorState');
        const chartContainer = document.getElementById('candlestickChart');

        if (chartLoadingState) chartLoadingState.classList.remove('hidden');
        if (chartErrorState) chartErrorState.classList.add('hidden');
        if (chartContainer) chartContainer.classList.add('hidden');

        try {
            // Get current date for API
            const currentDate = new Date();
            const daysAgo = new Date();
            daysAgo.setDate(currentDate.getDate() - currentPeriod); // Use currentPeriod (30/60/90 days)
            const formattedDate = daysAgo.toISOString().split('T')[0];

            // Encode symbol for URL
            const encodedSymbol = encodeURIComponent(symbol);

            // Call API to get candle data
            const apiUrl = `/api/candle/time/${formattedDate}/${encodedSymbol}/${interval}`;
            console.log('Request URL:', apiUrl);
            console.log('Using interval:', interval, 'currentChartInterval:', currentChartInterval);
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error(`Failed to fetch candle data: ${response.status}`);
            }

            const candleData = await response.json();

            if (!candleData || candleData.length === 0) {
                throw new Error('No candle data available');
            }

            // Render chart
            renderCandlestickChart(candleData);

        } catch (error) {
            console.error('Error loading candlestick data:', error);

            // Show error state
            if (chartLoadingState) chartLoadingState.classList.add('hidden');
            if (chartErrorState) chartErrorState.classList.remove('hidden');
            if (chartContainer) chartContainer.classList.add('hidden');
        }
    }

    /**
     * Render candlestick chart with ApexCharts including volume
     */
    function renderCandlestickChart(candleData) {
        // Hide loading state, show chart
        const chartLoadingState = document.getElementById('chartLoadingState');
        const chartErrorState = document.getElementById('chartErrorState');
        const chartContainer = document.getElementById('candlestickChart');

        if (chartLoadingState) chartLoadingState.classList.add('hidden');
        if (chartErrorState) chartErrorState.classList.add('hidden');
        if (chartContainer) chartContainer.classList.remove('hidden');

        // Format data for ApexCharts
        const formattedData = candleData.map(candle => ({
            x: new Date(candle.dateTime),
            y: [
                candle.open,
                candle.high,
                candle.low,
                candle.close
            ]
        })).sort((a, b) => a.x - b.x);  // Sort by date ascending

        // Format volume data
        const volumeData = candleData.map(candle => ({
            x: new Date(candle.dateTime),
            y: candle.volume || 0
        })).sort((a, b) => a.x - b.x);

        // Calculate percentage changes for colors
        const seriesData = formattedData.map((data, index, array) => {
            // Start with default candle color
            return data;
        });

        // Calculate min and max values for y-axis scale
        const prices = candleData.flatMap(candle => [candle.high, candle.low]);
        const minPrice = Math.min(...prices) * 0.995; // 0.5% lower
        const maxPrice = Math.max(...prices) * 1.005; // 0.5% higher

        // Calculate volume range
        const volumes = candleData.map(candle => candle.volume || 0);
        const maxVolume = Math.max(...volumes);

        // Destroy previous chart if exists
        if (candlestickChart) {
            candlestickChart.destroy();
        }

        // Chart options with mixed chart type
        const options = {
            series: [
                {
                    name: 'Preço',
                    type: 'candlestick',
                    data: seriesData
                },
                {
                    name: 'Volume',
                    type: 'column',
                    data: volumeData
                }
            ],
            chart: {
                type: 'candlestick',
                height: '100%',
                width: '100%',
                toolbar: {
                    show: true,
                    tools: {
                        download: true,
                        selection: true,
                        zoom: true,
                        zoomin: true,
                        zoomout: true,
                        pan: true,
                        reset: true
                    }
                },
                background: 'transparent',
                animations: {
                    enabled: false
                },
                parentHeightOffset: 0,
                offsetX: 0,
                offsetY: 0
            },
            plotOptions: {
                candlestick: {
                    colors: {
                        upward: '#22c55e',  // Green
                        downward: '#ef4444'  // Red
                    },
                    wick: {
                        useFillColor: true
                    }
                },
                bar: {
                    columnWidth: '40%',  // Reduced from 60% to 40%
                    colors: {
                        ranges: [{
                            from: 0,
                            to: maxVolume,
                            color: '#1e3a8a'  // Dark blue for volume bars
                        }]
                    }
                }
            },
            xaxis: {
                type: 'datetime',
                labels: {
                    style: {
                        colors: '#9ca3af'  // Gray-400
                    },
                    datetimeFormatter: {
                        year: 'yyyy',
                        month: 'MMM \'yy',
                        day: 'dd MMM',
                        hour: 'HH:mm'
                    }
                },
                axisBorder: {
                    color: '#1f2937'  // Gray-800
                },
                axisTicks: {
                    color: '#1f2937'  // Gray-800
                }
            },
            yaxis: [
                {
                    seriesName: 'Preço',
                    labels: {
                        style: {
                            colors: '#9ca3af'  // Gray-400
                        },
                        formatter: (value) => {
                            return value.toFixed(2);
                        }
                    },
                    min: minPrice,
                    max: maxPrice,
                    tickAmount: 6,
                    axisBorder: {
                        color: '#1f2937'  // Gray-800
                    },
                    axisTicks: {
                        color: '#1f2937'  // Gray-800
                    },
                    title: {
                        text: 'Preço',
                        style: {
                            color: '#9ca3af'
                        }
                    }
                },
                {
                    seriesName: 'Volume',
                    opposite: true,
                    labels: {
                        style: {
                            colors: '#9ca3af'  // Gray-400
                        },
                        formatter: (value) => {
                            if (value >= 1000000) {
                                return `${(value / 1000000).toFixed(1)}M`;
                            } else if (value >= 1000) {
                                return `${(value / 1000).toFixed(1)}K`;
                            }
                            return value.toFixed(0);
                        }
                    },
                    min: 0,
                    max: maxVolume * 3, // Increased from 1.2 to 3 to make bars smaller
                    axisBorder: {
                        color: '#1f2937'  // Gray-800
                    },
                    axisTicks: {
                        color: '#1f2937'  // Gray-800
                    },
                    title: {
                        text: 'Volume',
                        style: {
                            color: '#9ca3af'
                        }
                    }
                }
            ],
            grid: {
                show: true,
                borderColor: '#1f2937',  // Gray-800
                strokeDashArray: 2,
                position: 'back',
                xaxis: {
                    lines: {
                        show: false
                    }
                },
                yaxis: {
                    lines: {
                        show: true
                    }
                },
                padding: {
                    top: 10,
                    right: 10,
                    bottom: 10,
                    left: 10
                }
            },
            tooltip: {
                enabled: true,
                theme: 'dark',
                style: {
                    fontSize: '12px',
                    fontFamily: 'inherit'
                },
                x: {
                    format: 'dd MMM yyyy'
                },
                y: {
                    formatter: (value, { seriesIndex }) => {
                        if (seriesIndex === 0) { // Candlestick data
                            if (Array.isArray(value)) {
                                return `Open: ${value[0].toFixed(2)}<br>
                                    High: ${value[1].toFixed(2)}<br>
                                    Low: ${value[2].toFixed(2)}<br>
                                    Close: ${value[3].toFixed(2)}`
                            }
                            return value.toFixed(2);
                        } else { // Volume data
                            if (value >= 1000000) {
                                return `${(value / 1000000).toFixed(2)}M`;
                            } else if (value >= 1000) {
                                return `${(value / 1000).toFixed(2)}K`;
                            }
                            return value.toFixed(0);
                        }
                    }
                }
            },
            stroke: {
                width: [1, 0],
                curve: 'smooth'
            },
            legend: {
                show: true,
                labels: {
                    colors: '#d1d5db'  // Gray-300
                }
            },
            responsive: [
                {
                    breakpoint: 1000,
                    options: {
                        yaxis: [{
                            labels: {
                                show: true
                            }
                        }, {
                            labels: {
                                show: true
                            }
                        }]
                    }
                }
            ],
            theme: {
                mode: 'dark',
                palette: 'palette1'
            }
        };

        // Create and render the chart
        candlestickChart = new ApexCharts(document.getElementById('candlestickChart'), options);
        candlestickChart.render().then(() => {
            // Ensure proper sizing after render
            setTimeout(() => {
                if (candlestickChart) {
                    candlestickChart.updateOptions({}, false, true);
                }
            }, 100);
        });
    }

    // Initialize modal events when document is ready
    document.addEventListener('DOMContentLoaded', () => {
        // Initialize keyboard events for modal
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeCandlestickModal();
            }
        });

        // Initialize click outside to close
        const modal = document.getElementById('candlestickModal');
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeCandlestickModal();
                }
            });
        }
    });

    /**
     * Show/hide search spinner
     */
    function showMarketSearchSpinner(show) {
        const spinner = document.getElementById('marketSearchSpinner');
        if (spinner) {
            if (show) {
                spinner.classList.remove('hidden');
            } else {
                spinner.classList.add('hidden');
            }
        }
    }

    /**
     * Hide market symbol search results
     */
    function hideMarketSymbolSearchResults() {
        const searchResults = document.getElementById('marketSymbolSearchResults');
        if (searchResults) {
            searchResults.classList.add('hidden');
        }
    }

    // Market Data API Integration
    /**
     * List of popular symbols for each category
     */
    const MARKET_SYMBOLS = {
        stocks: ['AAPL', 'MSFT', 'GOOGL'],
        etfs: ['SPY', 'QQQ', 'VTI'],
        crypto: ['BTC/USD', 'ETH/USD', 'DOGE/USD']
    };

    /**
     * Initialize market data when page loads
     */
    document.addEventListener('DOMContentLoaded', function () {
        console.log('Loading market data...');
        loadMarketData();
    });

    /**
     * Load market data for all categories
     */
    async function loadMarketData() {
        try {
            await Promise.all([
                loadStocks(),
                loadETFs(),
                loadCrypto()
            ]);
        } catch (error) {
            console.error('Error loading market data:', error);
        }
    }

    /**
     * Load stocks data
     */
    async function loadStocks() {
        try {
            const stocksData = await Promise.all(
                MARKET_SYMBOLS.stocks.map(symbol => fetchAssetData(symbol, 'stock'))
            );
            renderAssets('stocksContainer', stocksData, 'Stocks');
        } catch (error) {
            console.error('Error loading stocks:', error);
            showErrorState('stocksContainer', 'Erro ao carregar stocks');
        }
    }

    /**
     * Load ETFs data
     */
    async function loadETFs() {
        try {
            const etfsData = await Promise.all(
                MARKET_SYMBOLS.etfs.map(symbol => fetchAssetData(symbol, 'etf'))
            );
            renderAssets('etfsContainer', etfsData, 'ETFs');
        } catch (error) {
            console.error('Error loading ETFs:', error);
            showErrorState('etfsContainer', 'Erro ao carregar ETFs');
        }
    }

    /**
     * Load crypto data
     */
    async function loadCrypto() {
        try {
            const cryptoData = await Promise.all(
                MARKET_SYMBOLS.crypto.map(symbol => fetchAssetData(symbol, 'crypto'))
            );
            renderAssets('cryptoContainer', cryptoData, 'Crypto');
        } catch (error) {
            console.error('Error loading crypto:', error);
            showErrorState('cryptoContainer', 'Erro ao carregar crypto');
        }
    }

    /**
     * Fetch asset data with 1 month period using /api/candle/
     */
    async function fetchAssetData(symbol, type) {
        try {
            // Calculate date 1 month ago
            const endDate = new Date();
            const startDate = new Date();
            startDate.setMonth(startDate.getMonth() - 1);

            const fromDate = startDate.toISOString().split('T')[0];

            console.log(`Fetching ${type} data for ${symbol} from ${fromDate} with 1day interval`);

            // Use the /api/candle/ endpoint
            const apiUrl = `/api/candle/time/${fromDate}/${encodeURIComponent(symbol)}/1day`;
            console.log(`Fetching ${type} data from API URL:`, apiUrl);
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            console.log(`Received data for ${symbol}:`, data);

            if (!data || !Array.isArray(data) || data.length === 0) {
                throw new Error(`No data received for ${symbol}`);
            }

            // Calculate the difference between first and last values
            const firstValue = parseFloat(data[0].close);
            const lastValue = parseFloat(data[data.length - 1].close);
            const difference = lastValue - firstValue;
            const percentageChange = ((difference / firstValue) * 100);

            return {
                symbol,
                name: getAssetName(symbol, type),
                type,
                currentPrice: lastValue,
                monthChange: difference,
                monthChangePercent: percentageChange,
                data: data
            };

        } catch (error) {
            console.error(`Error fetching data for ${symbol}:`, error);
            return {
                symbol,
                name: getAssetName(symbol, type),
                type,
                currentPrice: 0,
                monthChange: 0,
                monthChangePercent: 0,
                error: error.message
            };
        }
    }

    /**
     * Get display name for asset
     */
    function getAssetName(symbol, type) {
        const names = {
            // Stocks
            'AAPL': 'Apple Inc.',
            'MSFT': 'Microsoft Corp.',
            'GOOGL': 'Alphabet Inc.',

            // ETFs
            'SPY': 'SPDR S&P 500',
            'QQQ': 'Invesco QQQ',
            'VTI': 'Vanguard Total Stock',

            // Crypto
            'BTC': 'Bitcoin',
            'ETH': 'Ethereum',
            'DOGE': 'Dogecoin'
        };

        return names[symbol] || symbol;
    }

    /**
     * Render assets in the specified container
     */
    function renderAssets(containerId, assetsData, category) {
        const container = document.getElementById(containerId);
        if (!container) {
            console.error(`Container ${containerId} not found`);
            return;
        }

        // Clear loading state
        container.innerHTML = '';

        assetsData.forEach(asset => {
            const card = createAssetCard(asset, category);
            container.appendChild(card);
        });
    }

    /**
     * Create an asset card element
     */
    function createAssetCard(asset, category) {
        const isPositive = asset.monthChangePercent >= 0;
        const colorClass = isPositive ? 'text-green-400' : 'text-red-400';
        const bgColor = isPositive ? 'bg-green-500/10' : 'bg-red-500/10';
        const borderColor = isPositive ? 'border-green-500/20' : 'border-red-500/20';

        const card = document.createElement('div');
        card.className = 'bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6 hover:border-primary-500/30 transition-all duration-300 group cursor-pointer';

        card.innerHTML = `
        <div class="flex items-start justify-between mb-4">
            <div class="flex items-center gap-3">
                <div class="w-12 h-12 bg-gradient-to-r from-primary-600/20 to-blue-600/20 rounded-xl flex items-center justify-center">
                    <span class="text-primary-400 font-bold text-sm">${asset.symbol}</span>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-white group-hover:text-primary-400 transition-colors">${asset.name}</h3>
                    <p class="text-gray-400 text-sm">${asset.symbol}</p>
                </div>
            </div>
            <span class="${bgColor} ${borderColor} border px-2 py-1 rounded-lg text-xs font-medium text-gray-300">${category}</span>
        </div>

        <div class="space-y-3">
            <div class="flex items-center justify-between">
                <span class="text-gray-400">Preço Atual</span>
                <span class="text-white font-bold text-lg">${formatPrice(asset.currentPrice)}</span>
            </div>
            
            <div class="flex items-center justify-between">
                <span class="text-gray-400">Variação 1 Mês</span>
                <div class="flex items-center gap-2">
                    ${isPositive ?
                '<svg class="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 11l5-5m0 0l5 5m-5-5v12"/></svg>' :
                '<svg class="w-4 h-4 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 13l-5 5m0 0l-5-5m5 5V6"/></svg>'
            }
                    <span class="${colorClass} font-semibold">${isPositive ? '+' : ''}${asset.monthChangePercent.toFixed(2)}%</span>
                </div>
            </div>
            
            ${asset.error ?
                `<div class="pt-3 border-t border-gray-800">
                    <p class="text-red-400 text-xs">${asset.error}</p>
                </div>` : ''
            }
        </div>
    `;

        // Add click event to open chart modal
        if (!asset.error) {
            card.addEventListener('click', () => {
                openCandlestickChart(asset.symbol, asset.name);
            });
        }

        return card;
    }

    /**
     * Format price for display
     */
    function formatPrice(price) {
        if (price === 0) return 'N/A';

        // Format based on price range
        if (price >= 1000) {
            return `$${price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
        } else {
            return `$${price.toFixed(2)}`;
        }
    }

    /**
     * Show error state in container
     */
    function showErrorState(containerId, message) {
        const container = document.getElementById(containerId);
        if (!container) return;

        container.innerHTML = `
        <div class="col-span-full flex flex-col items-center justify-center py-12">
            <div class="w-16 h-16 bg-red-500/10 rounded-full flex items-center justify-center mb-4">
                <svg class="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 19c-.77.833.192 2.5 1.732 2.5z"/>
                </svg>
            </div>
            <p class="text-red-400 text-center">${message}</p>
            <button onclick="loadMarketData()" class="mt-4 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
                Tentar Novamente
            </button>
        </div>
    `;
    }

    /**
     * Open candlestick chart with asset data
     */
    function openCandlestickChart(symbol, name) {
        console.log(`Opening chart for ${symbol} - ${name}`);

        // Create symbol data object
        const symbolData = {
            symbol: symbol,
            instrument_name: name,
            exchange: 'Market Data',
            currency: 'USD',
            type: 'Asset'
        };

        // Use the existing modal functionality
        openCandlestickModal(symbolData);
    }
</script>

<!-- Add ApexCharts -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>



