@page
@{
    ViewData["Title"] = "Ativos";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-950 pt-20 pb-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        <!-- Header Section -->
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1
                    class="text-4xl font-bold bg-gradient-to-r from-primary-400 to-blue-400 bg-clip-text text-transparent mb-2">
                    Ativos
                </h1>
                <p class="text-gray-400">Gerencie todos os seus ativos financeiros</p>
            </div>
            <button id="novoAtivoBtn"
                class="bg-gradient-to-r from-primary-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-primary-700 hover:to-blue-700 focus:ring-4 focus:ring-primary-500/25 transition-all duration-200 transform hover:scale-105 active:scale-95 flex items-center gap-2 font-semibold shadow-lg">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Adicionar Ativo
            </button>
        </div>

        <!-- Asset Categories Overview -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <!-- Fundos de Investimento Card -->
            <a href="/FundosInvestimento" class="group">
                <div
                    class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6 hover:border-primary-500/50 transition-all duration-300 card-hover">
                    <div class="flex items-center justify-between mb-4">
                        <div
                            class="w-12 h-12 bg-primary-500/10 rounded-xl flex items-center justify-center group-hover:bg-primary-500/20 transition-colors">
                            <svg class="w-6 h-6 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                            </svg>
                        </div>
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-primary-400 transition-colors" fill="none"
                            stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7">
                            </path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold text-white mb-2">Fundos de Investimento</h3>
                    <p class="text-gray-400 text-sm mb-4">Gerencie seus investimentos em fundos e criptomoedas</p>
                    <div id="fundosValue" class="text-2xl font-bold text-white">€-----</div>
                    <div id="fundosChange" class="text-sm text-gray-500">-----</div>
                </div>
            </a>

            <!-- Imóveis Arrendados Card -->
            <a href="/ImovelArrendado" class="group">
                <div
                    class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6 hover:border-primary-500/50 transition-all duration-300 card-hover">
                    <div class="flex items-center justify-between mb-4">
                        <div
                            class="w-12 h-12 bg-primary-500/10 rounded-xl flex items-center justify-center group-hover:bg-primary-500/20 transition-colors">
                            <svg class="w-6 h-6 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6">
                                </path>
                            </svg>
                        </div>
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-primary-400 transition-colors" fill="none"
                            stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7">
                            </path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold text-white mb-2">Imóveis Arrendados</h3>
                    <p class="text-gray-400 text-sm mb-4">Propriedades e rendas de imóveis</p>
                    <div id="imoveisValue" class="text-2xl font-bold text-white">€-----</div>
                    <div id="imoveisChange" class="text-sm text-gray-500">-----</div>
                </div>
            </a>

            <!-- Depósitos a Prazo Card -->
            <a href="/DepositoPrazo" class="group">
                <div
                    class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6 hover:border-primary-500/50 transition-all duration-300 card-hover">
                    <div class="flex items-center justify-between mb-4">
                        <div
                            class="w-12 h-12 bg-primary-500/10 rounded-xl flex items-center justify-center group-hover:bg-primary-500/20 transition-colors">
                            <svg class="w-6 h-6 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1">
                                </path>
                            </svg>
                        </div>
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-primary-400 transition-colors" fill="none"
                            stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7">
                            </path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold text-white mb-2">Depósitos a Prazo</h3>
                    <p class="text-gray-400 text-sm mb-4">Depósitos bancários e investimentos seguros</p>
                    <div id="depositosValue" class="text-2xl font-bold text-white">€-----</div>
                    <div id="depositosChange" class="text-sm text-gray-500">-----</div>
                </div>
            </a>
        </div>

        <!-- Assets List -->
        <div class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6 mb-8">
            <h2 class="text-2xl font-bold text-white mb-6">Meus Ativos</h2>

            <!-- Loading State -->
            <div id="loadingAtivos" class="text-center py-8">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto mb-4"></div>
                <p class="text-gray-400">Carregando ativos...</p>
            </div>

            <!-- Assets Grid -->
            <div id="ativosGrid" class="hidden">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Assets will be dynamically loaded here -->
                </div>
            </div>

            <!-- Empty State -->
            <div id="emptyStateAtivos" class="text-center py-16 hidden">
                <div class="w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z">
                        </path>
                    </svg>
                </div>
                <h3 class="text-xl font-semibold text-white mb-2">Nenhum ativo encontrado</h3>
                <p class="text-gray-400 mb-6">Comece adicionando seu primeiro ativo financeiro</p>
                <button
                    class="bg-gradient-to-r from-primary-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-primary-700 hover:to-blue-700 transition-all duration-200">
                    Adicionar Primeiro Ativo
                </button>
            </div>
        </div>



    </div>
</div>

<!-- Modal Novo Ativo -->
<div id="novoAtivoModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl shadow-2xl w-full max-w-md mx-4">
        <div class="p-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-white">Novo Ativo</h2>
                <button id="fecharModalNovoAtivo" class="text-gray-400 hover:text-white transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <form id="formNovoAtivo" class="space-y-4">
                <div>
                    <label for="nomeAtivo" class="block text-sm font-medium text-gray-300 mb-2">Nome do Ativo</label>
                    <input type="text" id="nomeAtivo" name="nome" required
                        class="w-full bg-gray-800 border border-gray-700 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/25 transition-colors"
                        placeholder="Ex: Bitcoin, Tesla, PPR CGD...">
                </div>

                <div>
                    <label for="carteiraSelect" class="block text-sm font-medium text-gray-300 mb-2">Carteira</label>
                    <select id="carteiraSelect" name="carteiraId" required
                        class="w-full bg-gray-800 border border-gray-700 rounded-xl px-4 py-3 text-white focus:border-primary-500 focus:ring-2 focus:ring-primary-500/25 transition-colors">
                        <option value="">Selecione uma carteira</option>
                        <!-- As opções serão preenchidas dinamicamente -->
                    </select>
                </div>

                <div>
                    <label for="dataInicio" class="block text-sm font-medium text-gray-300 mb-2">Data de Início</label>
                    <input type="date" id="dataInicio" name="dataInicio" required
                        class="w-full bg-gray-800 border border-gray-700 rounded-xl px-4 py-3 text-white focus:border-primary-500 focus:ring-2 focus:ring-primary-500/25 transition-colors">
                </div>

                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="duracaoMeses" class="block text-sm font-medium text-gray-300 mb-2">Duração
                            (meses)</label>
                        <input type="number" id="duracaoMeses" name="duracaoMeses" min="0" value="0"
                            class="w-full bg-gray-800 border border-gray-700 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/25 transition-colors"
                            placeholder="0">
                    </div>

                    <div>
                        <label for="taxaImposto" class="block text-sm font-medium text-gray-300 mb-2">Taxa de Imposto
                            (%)</label>
                        <input type="number" id="taxaImposto" name="taxaImposto" min="0" max="100" step="0.1" value="23"
                            class="w-full bg-gray-800 border border-gray-700 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/25 transition-colors"
                            placeholder="23">
                    </div>
                </div>

                <div class="flex gap-3 pt-4">
                    <button type="button" id="cancelarNovoAtivo"
                        class="flex-1 py-3 bg-gray-800 text-gray-300 rounded-xl hover:bg-gray-700 transition-colors duration-200">
                        Cancelar
                    </button>
                    <button type="submit"
                        class="flex-1 py-3 bg-gradient-to-r from-primary-600 to-blue-600 text-white rounded-xl hover:from-primary-700 hover:to-blue-700 transition-all duration-200">
                        Adicionar Ativo
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Confirmation Modal for Asset Deletion -->
<div id="eliminarAtivoModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl shadow-2xl w-full max-w-md mx-4">
        <div class="p-6">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center gap-3">
                    <div class="w-12 h-12 bg-red-500/10 rounded-xl flex items-center justify-center">
                        <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </div>
                    <h2 class="text-xl font-bold text-white">Eliminar Ativo</h2>
                </div>
                <button id="fecharModalEliminarAtivo" class="text-gray-400 hover:text-white transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="mb-6">
                <p class="text-gray-300 mb-4">
                    Tem a certeza de que pretende eliminar este ativo? Esta ação não pode ser revertida.
                </p>
                <div class="bg-gray-800/50 rounded-xl p-4 border border-gray-700">
                    <div id="deleteAtivoInfo" class="text-white">
                        <!-- Ativo info will be populated by JavaScript -->
                    </div>
                </div>
            </div>

            <div class="flex justify-end gap-3">
                <button id="cancelarEliminarAtivo"
                    class="bg-gray-700 text-white px-6 py-3 rounded-xl hover:bg-gray-600 transition-all duration-200 font-medium">
                    Cancelar
                </button>
                <button id="confirmarEliminarAtivo"
                    class="bg-red-600 text-white px-6 py-3 rounded-xl hover:bg-red-700 focus:ring-4 focus:ring-red-500/25 transition-all duration-200 font-medium">
                    Eliminar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Transferring Asset to Another Portfolio -->
<div id="transferirAtivoModal"
    class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl shadow-2xl w-full max-w-md mx-4">
        <div class="p-6">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center gap-3">
                    <div class="w-12 h-12 bg-blue-500/10 rounded-xl flex items-center justify-center">
                        <svg class="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                        </svg>
                    </div>
                    <h2 class="text-xl font-bold text-white">Transferir Ativo</h2>
                </div>
                <button id="fecharModalTransferirAtivo" class="text-gray-400 hover:text-white transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="mb-6">
                <div class="bg-gray-800/50 rounded-xl p-4 border border-gray-700 mb-4">
                    <div id="transferAtivoInfo" class="text-white">
                        <!-- Ativo info will be populated by JavaScript -->
                    </div>
                </div>

                <div class="mt-4">
                    <label for="carteiraDestinoSelect" class="block text-sm font-medium text-gray-300 mb-2">
                        Selecione a Carteira de Destino
                    </label>
                    <select id="carteiraDestinoSelect" name="carteiraDestinoId" required
                        class="w-full bg-gray-800 border border-gray-700 rounded-xl px-4 py-3 text-white focus:border-blue-500 focus:ring-2 focus:ring-blue-500/25 transition-colors">
                        <option value="">Selecione uma carteira</option>
                        <!-- Options will be populated by JavaScript -->
                    </select>
                </div>
            </div>

            <div class="flex justify-end gap-3">
                <button id="cancelarTransferirAtivo"
                    class="bg-gray-700 text-white px-6 py-3 rounded-xl hover:bg-gray-600 transition-all duration-200 font-medium">
                    Cancelar
                </button>
                <button id="confirmarTransferirAtivo"
                    class="bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 focus:ring-4 focus:ring-blue-500/25 transition-all duration-200 font-medium">
                    Transferir
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Asset Details -->
<div id="detalhesAtivoModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div
        class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl shadow-2xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
        <div class="p-6">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center gap-3">
                    <div id="detalhesAtivoIcon"
                        class="w-12 h-12 bg-primary-500/10 rounded-xl flex items-center justify-center">
                        <svg class="w-6 h-6 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                    </div>
                    <div>
                        <h2 id="detalhesAtivoTitulo" class="text-2xl font-bold text-white">Detalhes do Ativo</h2>
                        <p id="detalhesAtivoSubtitulo" class="text-gray-400">Informações detalhadas</p>
                    </div>
                </div>
                <button id="fecharModalDetalhesAtivo" class="text-gray-400 hover:text-white transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Asset Basic Information -->
                <div class="bg-gray-800/50 rounded-xl p-6 border border-gray-700">
                    <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                        <svg class="w-5 h-5 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Informações Gerais
                    </h3>
                    <div id="detalhesAtivoInfo" class="space-y-3">
                        <!-- Asset details will be populated by JavaScript -->
                    </div>
                </div>

                <!-- Financial Summary -->
                <div class="bg-gray-800/50 rounded-xl p-6 border border-gray-700">
                    <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                        <svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1">
                            </path>
                        </svg>
                        Resumo Financeiro
                    </h3>
                    <div id="detalhesAtivoFinanceiro" class="space-y-3">
                        <!-- Financial summary will be populated by JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Related Investments Section -->
            <div class="mt-6">
                <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                    <svg class="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10">
                        </path>
                    </svg>
                    Investimentos Relacionados
                </h3>

                <!-- Tabs for different investment types -->
                <div class="flex space-x-1 bg-gray-800/50 rounded-lg p-1 mb-4">
                    <button id="tabDepositos"
                        class="flex-1 py-2 px-4 text-sm font-medium rounded-md transition-colors text-gray-400 hover:text-white">
                        Depósitos a Prazo
                    </button>
                    <button id="tabFundos"
                        class="flex-1 py-2 px-4 text-sm font-medium rounded-md transition-colors text-gray-400 hover:text-white">
                        Fundos de Investimento
                    </button>
                    <button id="tabImoveis"
                        class="flex-1 py-2 px-4 text-sm font-medium rounded-md transition-colors text-gray-400 hover:text-white">
                        Imóveis Arrendados
                    </button>
                </div>

                <!-- Tab Contents -->
                <div id="contentDepositos" class="tab-content hidden">
                    <div id="listaDepositos" class="space-y-3">
                        <!-- Deposits will be populated by JavaScript -->
                    </div>
                </div>

                <div id="contentFundos" class="tab-content hidden">
                    <div id="listaFundos" class="space-y-3">
                        <!-- Funds will be populated by JavaScript -->
                    </div>
                </div>

                <div id="contentImoveis" class="tab-content hidden">
                    <div id="listaImoveis" class="space-y-3">
                        <!-- Real estate will be populated by JavaScript -->
                    </div>
                </div>

                <!-- Empty state -->
                <div id="emptyInvestments" class="text-center py-8 hidden">
                    <div class="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-8 h-8 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4">
                            </path>
                        </svg>
                    </div>
                    <h4 class="text-lg font-medium text-white mb-2">Nenhum investimento encontrado</h4>
                    <p class="text-gray-400">Este ativo ainda não tem investimentos específicos associados.</p>
                </div>
            </div>

            <div class="flex justify-end mt-8 pt-6 border-t border-gray-700">
                <button id="fecharBtnDetalhesAtivo"
                    class="bg-gray-700 text-white px-6 py-3 rounded-xl hover:bg-gray-600 transition-all duration-200 font-medium">
                    Fechar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Notifications Container -->
<div id="toast-container" class="fixed top-20 right-4 z-50 space-y-2"></div>

<!-- Include the asset calculations script -->
<script src="~/js/ativosCalculos.js"></script>

<script>
    let carteiras = [];
    let ativos = [];

    // Performance optimization: Asset info cache
    const assetInfoCache = new Map();
    
    function getCachedAssetInfo(ativo) {
        return assetInfoCache.get(ativo.id);
    }
    
    function setCachedAssetInfo(ativo, info) {
        assetInfoCache.set(ativo.id, info);
    }
    
    function clearAssetInfoCache() {
        assetInfoCache.clear();
    }

    // Performance helper: Get basic asset info without expensive calculations
    function getBasicAssetInfo(ativo) {
        return {
            ...ativo,
            tipo: 'Ativo Financeiro', // Default type, will be updated later
            lucro: 0,
            lucroTotal: 0,
            valorAtual: 0,
            valorAtualTotal: 0,
            valorInvestido: 0,
            valorInvestidoTotal: 0,
            detalhes: []
        };
    }

    // Check if card should be updated with new detailed info
    function shouldUpdateCard(basicInfo, detailedInfo) {
        return basicInfo.tipo !== detailedInfo.tipo || 
               Math.abs(basicInfo.valorAtual - detailedInfo.valorAtual) > 0.01 ||
               Math.abs(basicInfo.lucro - detailedInfo.lucro) > 0.01;
    }

    // Update card with detailed information
    function updateCardWithDetailedInfo(card, ativo, detailedInfo, nomeCarteira) {
        // This would update the card content with new detailed info
        // For now, we'll just cache it and let the next render use it
        setCachedAssetInfo(ativo, detailedInfo);
    }

    document.addEventListener('DOMContentLoaded', function () {
        console.log('Ativos page loaded');
        carregarDados();

        // Event listeners para o modal de novo ativo
        document.getElementById('novoAtivoBtn')?.addEventListener('click', abrirModalNovoAtivo);
        document.getElementById('fecharModalNovoAtivo')?.addEventListener('click', fecharModalNovoAtivo);
        document.getElementById('cancelarNovoAtivo')?.addEventListener('click', fecharModalNovoAtivo);
        document.getElementById('formNovoAtivo')?.addEventListener('submit', adicionarNovoAtivo);

        // Event listeners para o modal de eliminação
        document.getElementById('fecharModalEliminarAtivo')?.addEventListener('click', fecharModalEliminarAtivo);
        document.getElementById('cancelarEliminarAtivo')?.addEventListener('click', fecharModalEliminarAtivo);
        document.getElementById('confirmarEliminarAtivo')?.addEventListener('click', confirmarEliminarAtivo);

        // Event listeners para o modal de transferência
        document.getElementById('fecharModalTransferirAtivo')?.addEventListener('click', fecharModalTransferirAtivo);
        document.getElementById('cancelarTransferirAtivo')?.addEventListener('click', fecharModalTransferirAtivo);
        document.getElementById('confirmarTransferirAtivo')?.addEventListener('click', confirmarTransferirAtivo);

        // Event listeners para o modal de detalhes
        document.getElementById('fecharModalDetalhesAtivo')?.addEventListener('click', fecharModalDetalhesAtivo);
        document.getElementById('fecharBtnDetalhesAtivo')?.addEventListener('click', fecharModalDetalhesAtivo);

        // Fechar modais ao clicar fora deles
        document.getElementById('novoAtivoModal')?.addEventListener('click', function (e) {
            if (e.target === this) fecharModalNovoAtivo();
        });

        document.getElementById('eliminarAtivoModal')?.addEventListener('click', function (e) {
            if (e.target === this) fecharModalEliminarAtivo();
        });

        document.getElementById('transferirAtivoModal')?.addEventListener('click', function (e) {
            if (e.target === this) fecharModalTransferirAtivo();
        });

        document.getElementById('detalhesAtivoModal')?.addEventListener('click', function (e) {
            if (e.target === this) fecharModalDetalhesAtivo();
        });

        // Definir data padrão para hoje
        const hoje = new Date().toISOString().split('T')[0];
        document.getElementById('dataInicio').value = hoje;
    });

    async function carregarDados() {
        try {
            console.log('Iniciando carregamento de dados...');

            // Show loading state
            const loadingElement = document.getElementById('loadingAtivos');
            loadingElement.classList.remove('hidden');

            // Carregar carteiras e ativos em paralelo
            const [carteirasResponse, ativosResponse] = await Promise.all([
                fetch('/api/carteira/ver?userIdFromCarteira=-1', {
                    method: 'GET',
                    credentials: 'include'
                }),
                fetch('/api/ativofinanceiro/ver?userIdFromAtivo=-1', {
                    method: 'GET',
                    credentials: 'include'
                })
            ]);

            console.log('Responses received:', {
                carteiras: carteirasResponse.status,
                ativos: ativosResponse.status
            });

            if (!carteirasResponse.ok || !ativosResponse.ok) {
                throw new Error(`Erro ao carregar dados - Carteiras: ${carteirasResponse.status}, Ativos: ${ativosResponse.status}`);
            }

            carteiras = await carteirasResponse.json();
            ativos = await ativosResponse.json();

            console.log('Carteiras carregadas:', carteiras);
            console.log('Ativos carregados:', ativos);

            // Performance optimization: Load asset data in background while showing basic info
            console.log('Iniciando renderização de ativos...');
            await renderizarAtivos();
            console.log('Renderização de ativos concluída');

            // Load detailed asset data in background
            console.log('Iniciando fetchAllAssetData...');
            fetchAllAssetData().then(async () => {
                console.log('fetchAllAssetData concluído');
                
                // Update the overview cards with calculated data
                console.log('Iniciando atualização do resumo...');
                await atualizarResumoAtivos();
                console.log('Atualização do resumo concluída');
                
                // Refresh asset cards with detailed info if needed
                // This could be optimized further by only updating changed data
            }).catch(error => {
                console.error('Erro ao carregar dados detalhados dos ativos:', error);
                showToast('Alguns dados detalhados podem não estar disponíveis', 'warning');
            });

            // Check if we need to show specific ativo details from navigation
            verificarNavegacaoParaAtivo();

        } catch (error) {
            console.error('Erro ao carregar dados:', error);
            mostrarErro();
        }
    }

    async function renderizarAtivos() {
        const loadingElement = document.getElementById('loadingAtivos');
        const gridElement = document.getElementById('ativosGrid');
        const emptyElement = document.getElementById('emptyStateAtivos');

        // Esconder loading
        loadingElement.classList.add('hidden');

        if (ativos.length === 0) {
            // Mostrar estado vazio
            emptyElement.classList.remove('hidden');
            return;
        }

        // Mostrar grid
        gridElement.classList.remove('hidden');
        const gridContainer = gridElement.querySelector('.grid');
        gridContainer.innerHTML = '';

        // Performance optimization: Create cards in batches to avoid blocking UI
        const BATCH_SIZE = 6; // Process 6 cards at a time
        
        for (let i = 0; i < ativos.length; i += BATCH_SIZE) {
            const batch = ativos.slice(i, i + BATCH_SIZE);
            
            // Process batch in parallel but wait for completion before next batch
            const cardPromises = batch.map(async ativo => {
                const carteira = carteiras.find(c => c.id === ativo.carteiraId);
                const nomeCarteira = carteira ? carteira.nome : 'Carteira não encontrada';
                return criarCardAtivo(ativo, nomeCarteira);
            });
            
            const cards = await Promise.all(cardPromises);
            
            // Add cards to DOM
            cards.forEach(card => gridContainer.appendChild(card));
            
            // Allow UI to update between batches
            if (i + BATCH_SIZE < ativos.length) {
                await new Promise(resolve => setTimeout(resolve, 10));
            }
        }
    }

    async function criarCardAtivo(ativo, nomeCarteira) {
        const card = document.createElement('div');
        card.className = 'bg-gray-800/50 backdrop-blur-xl border border-gray-700 rounded-2xl p-6 hover:border-primary-500/50 transition-all duration-300 card-hover';

        // Performance optimization: Use simplified asset info for initial rendering
        let detailedInfo = getCachedAssetInfo(ativo);
        
        if (!detailedInfo) {
            // Use basic asset type detection first (fast)
            detailedInfo = getBasicAssetInfo(ativo);
            
            // Load detailed info asynchronously
            getDetailedAssetInfo(ativo).then(fullInfo => {
                setCachedAssetInfo(ativo, fullInfo);
                // Update card with detailed info if significantly different
                if (shouldUpdateCard(detailedInfo, fullInfo)) {
                    updateCardWithDetailedInfo(card, ativo, fullInfo, nomeCarteira);
                }
            }).catch(error => {
                console.warn(`Erro ao carregar informações detalhadas do ativo ${ativo.nome}:`, error);
            });
        }

        // Debug: Log the detailed info (only in development)
        if (window.location.hostname === 'localhost') {
            console.log(`Asset ${ativo.nome} detailedInfo:`, detailedInfo);
        }

        // Formatar data
        const dataInicio = new Date(ativo.dataInicio).toLocaleDateString('pt-PT');

        // Calcular duração ou mostrar "Sem prazo" se duracaoMeses for 0
        const duracao = ativo.duracaoMeses > 0 ? `${ativo.duracaoMeses} meses` : 'Sem prazo definido';

        // Formatar valores monetários
        const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });

        // Determinar cor do ícone baseado no tipo de ativo
        let iconColor = 'primary';
        let iconPath = 'd="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"';

        if (detailedInfo.tipo === 'Depósito a Prazo') {
            iconColor = 'blue';
            iconPath = 'd="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"';
        } else if (detailedInfo.tipo === 'Fundo de Investimento') {
            iconColor = 'green';
            iconPath = 'd="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"';
        } else if (detailedInfo.tipo === 'Imóvel Arrendado') {
            iconColor = 'orange';
            iconPath = 'd="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"';
        }

        card.innerHTML = `
            <div class="flex items-center justify-between mb-4">
                <div class="w-12 h-12 bg-${iconColor}-500/10 rounded-xl flex items-center justify-center">
                    <svg class="w-6 h-6 text-${iconColor}-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" ${iconPath}></path>
                    </svg>
                </div>
                <div class="flex gap-2">
                    <button class="text-gray-400 hover:text-blue-500 transition-colors p-1.5 rounded-lg hover:bg-blue-500/10" onclick="transferirAtivo(${ativo.id}, event)" title="Transferir para outra carteira">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                        </svg>
                    </button>
                    <button class="text-gray-400 hover:text-red-500 transition-colors p-1.5 rounded-lg hover:bg-red-500/10" onclick="eliminarAtivo(${ativo.id}, event)" title="Eliminar ativo">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                    <button class="text-gray-400 hover:text-white transition-colors" onclick="verDetalhesAtivo(${ativo.id})">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                    </button>
                </div>
            </div>
            
            <div class="mb-4">
                <h3 class="text-lg font-semibold text-white mb-1">${ativo.nome}</h3>
                <p class="text-primary-400 text-sm font-medium">📁 ${nomeCarteira}</p>
                <p class="text-${iconColor}-400 text-xs font-medium mt-1">${detailedInfo.tipo}</p>
            </div>
            
            <div class="space-y-3 mb-4">
                <div class="flex justify-between items-center">
                    <span class="text-gray-400 text-sm">Data de Início:</span>
                    <span class="text-white text-sm font-medium">${dataInicio}</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-400 text-sm">Duração:</span>
                    <span class="text-white text-sm font-medium">${duracao}</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-400 text-sm">Taxa de Imposto:</span>
                    <span class="text-white text-sm font-medium">${ativo.taxaImposto}%</span>
                </div>
                ${detailedInfo.valorAtual > 0 ? `
                <div class="flex justify-between items-center">
                    <span class="text-gray-400 text-sm">Valor Atual:</span>
                    <span class="text-white text-sm font-medium">${formatter.format(detailedInfo.valorAtual)}</span>
                </div>
                ` : ''}
                ${detailedInfo.detalhes && detailedInfo.detalhes.length >= 1 ? `
                <div class="pt-3 mt-2 border-t border-gray-700">
                    <div class="flex justify-between items-center">
                        <span class="text-purple-400 text-sm font-medium">Totais Agregados:</span>
                        <span class="text-gray-300 text-xs">${detailedInfo.detalhes.length} investimentos</span>
                    </div>
                    <div class="flex justify-between items-center mt-1">
                        <span class="text-gray-400 text-sm">Valor Total:</span>
                        <span class="text-white text-sm font-medium">${formatter.format(detailedInfo.valorAtualTotal)}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400 text-sm">Lucro Total:</span>
                        <span class="text-green-400 text-sm font-bold">+${formatter.format(detailedInfo.lucroTotal)}</span>
                    </div>
                </div>
                ` : ''}
            </div>
            
            <button onclick="verDetalhesAtivo(${ativo.id})"
                class="w-full py-2 bg-${iconColor}-600/20 hover:bg-${iconColor}-600/30 text-${iconColor}-400 rounded-lg transition-colors duration-200 text-sm font-medium">
                Ver Detalhes
            </button>
        `;

        return card;
    }

    async function atualizarResumoAtivos() {
        const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });

        // Update the overview cards with real data
        if (window.allAssetData) {
            // Update Fundos de Investimento card with error handling
            const fundosValue = document.getElementById('fundosValue');
            const fundosChange = document.getElementById('fundosChange');
            if (fundosValue && fundosChange && window.allAssetData.fundos) {
                const totalFundos = window.allAssetData.fundos.reduce((sum, fundo) => sum + (fundo.montanteInvestido || 0), 0);

                // Calculate total profit for funds with timeout and error handling
                let totalFundosProfit = 0;
                const fundos = window.allAssetData.fundos.slice(0, 10); // Limit to first 10 for performance
                
                try {
                    const profitPromises = fundos.map(async fundo => {
                        try {
                            return await Promise.race([
                                calcularLucroFundoInvestimento(fundo),
                                new Promise((_, reject) => 
                                    setTimeout(() => reject(new Error('Timeout')), 3000)
                                )
                            ]);
                        } catch (error) {
                            console.warn(`Erro ao calcular lucro do fundo ${fundo.ativoSigla}:`, error);
                            return 0; // Return 0 profit on error
                        }
                    });
                    
                    const profits = await Promise.all(profitPromises);
                    totalFundosProfit = profits.reduce((sum, profit) => sum + profit, 0);
                } catch (error) {
                    console.error('Erro ao calcular lucros dos fundos:', error);
                }

                console.log(`Total de fundos investido: ${formatter.format(totalFundos)}`);
                console.log(`Total de lucro dos fundos: ${formatter.format(totalFundosProfit)}`);

                fundosValue.textContent = formatter.format(totalFundos);
                if (totalFundosProfit >= 0) {
                    fundosChange.textContent = `+${formatter.format(totalFundosProfit)} lucro`;
                    fundosChange.className = 'text-sm text-green-400';
                } else {
                    fundosChange.textContent = `${formatter.format(totalFundosProfit)} lucro`;
                    fundosChange.className = 'text-sm text-red-400';
                }
            }

            // Update Imóveis Arrendados card
            const imoveisValue = document.getElementById('imoveisValue');
            const imoveisChange = document.getElementById('imoveisChange');
            if (imoveisValue && imoveisChange) {
                const totalImoveis = window.allAssetData.imoveis.reduce((sum, imovel) => sum + (imovel.valorImovel || imovel.valorCompra || 0), 0);

                // Calculate total profit for real estate (async)
                let totalImoveisProfit = 0;
                for (const imovel of window.allAssetData.imoveis) {
                    try {
                        const profit = await calcularLucroImovel(imovel);
                        totalImoveisProfit += profit;
                    } catch (error) {
                        console.error('Erro ao calcular lucro do imóvel:', error);
                    }
                }

                imoveisValue.textContent = formatter.format(totalImoveis);
                if (totalImoveisProfit >= 0) {
                    imoveisChange.textContent = `+${formatter.format(totalImoveisProfit)} lucro`;
                    imoveisChange.className = 'text-sm text-green-400';
                } else {
                    imoveisChange.textContent = `${formatter.format(totalImoveisProfit)} lucro`;
                    imoveisChange.className = 'text-sm text-red-400';
                }
            }

            // Update Depósitos a Prazo card
            const depositosValue = document.getElementById('depositosValue');
            const depositosChange = document.getElementById('depositosChange');
            if (depositosValue && depositosChange) {
                const totalDepositos = window.allAssetData.depositos.reduce((sum, deposito) => sum + (deposito.valorAtual || deposito.valorInvestido || 0), 0);

                // Calculate total profit for deposits (async)
                let totalDepositosProfit = 0;
                for (const deposito of window.allAssetData.depositos) {
                    try {
                        const profit = await calcularLucroDeposito(deposito);
                        totalDepositosProfit += profit;
                    } catch (error) {
                        console.error('Erro ao calcular lucro do depósito:', error);
                    }
                }

                depositosValue.textContent = formatter.format(totalDepositos);
                if (totalDepositosProfit >= 0) {
                    depositosChange.textContent = `+${formatter.format(totalDepositosProfit)} lucro`;
                    depositosChange.className = 'text-sm text-green-400';
                } else {
                    depositosChange.textContent = `${formatter.format(totalDepositosProfit)} lucro`;
                    depositosChange.className = 'text-sm text-red-400';
                }
            }
        }

        console.log('Resumo dos ativos atualizado com cálculos de lucro');
    }

    function mostrarErro() {
        const loadingElement = document.getElementById('loadingAtivos');
        const gridElement = document.getElementById('ativosGrid');
        const emptyElement = document.getElementById('emptyStateAtivos');

        loadingElement.classList.add('hidden');
        gridElement.classList.add('hidden');
        emptyElement.classList.remove('hidden');

        // Alterar mensagem para erro
        emptyElement.querySelector('h3').textContent = 'Erro ao carregar ativos';
        emptyElement.querySelector('p').textContent = 'Ocorreu um erro ao carregar os dados. Tente novamente.';
    }

    function abrirModalNovoAtivo() {
        // Preencher select de carteiras
        preencherSelectCarteiras();

        const modal = document.getElementById('novoAtivoModal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    }

    function fecharModalNovoAtivo() {
        const modal = document.getElementById('novoAtivoModal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');

        // Limpar formulário
        document.getElementById('formNovoAtivo').reset();
        const hoje = new Date().toISOString().split('T')[0];
        document.getElementById('dataInicio').value = hoje;
        document.getElementById('taxaImposto').value = '23';
    }

    function preencherSelectCarteiras() {
        const select = document.getElementById('carteiraSelect');

        // Limpar opções existentes (exceto a primeira)
        while (select.children.length > 1) {
            select.removeChild(select.lastChild);
        }

        // Adicionar carteiras como opções
        carteiras.forEach(carteira => {
            const option = document.createElement('option');
            option.value = carteira.id;
            option.textContent = carteira.nome;
            select.appendChild(option);
        });
    }

    async function adicionarNovoAtivo(event) {
        event.preventDefault();

        const formData = new FormData(event.target);

        // Converter data para formato ISO
        const dataInicio = new Date(formData.get('dataInicio')).toISOString();

        const novoAtivo = {
            userId: -1,
            carteiraId: parseInt(formData.get('carteiraId')),
            nome: formData.get('nome'),
            dataInicio: dataInicio,
            duracaoMeses: parseInt(formData.get('duracaoMeses')) || 0,
            taxaImposto: parseFloat(formData.get('taxaImposto')) || 0
        };

        try {
            const response = await fetch('/api/ativofinanceiro/adicionar', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify(novoAtivo)
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Backend error response:', errorText);
                throw new Error(errorText || `HTTP error! Status: ${response.status}`);
            }

            showToast('Ativo adicionado com sucesso!', 'success');
            fecharModalNovoAtivo();

            // Recarregar dados para mostrar o novo ativo
            carregarDados();

        } catch (error) {
            console.error('Erro ao adicionar ativo:', error);
            const errorMessage = error.message || 'Erro ao adicionar ativo. Tente novamente.';
            showToast(errorMessage, 'error');
        }
    }

    function verDetalhesAtivo(ativoId) {
        const ativo = ativos.find(a => a.id === ativoId);

        if (!ativo) {
            showToast('Ativo não encontrado.', 'error');
            return;
        }

        // Encontrar a carteira do ativo
        const carteira = carteiras.find(c => c.id === ativo.carteiraId);
        const nomeCarteira = carteira ? carteira.nome : 'Carteira não encontrada';

        // Formatar valores monetários
        const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });

        // Formatar data
        const dataInicio = new Date(ativo.dataInicio).toLocaleDateString('pt-PT');
        const dataInicioCompleta = new Date(ativo.dataInicio).toLocaleString('pt-PT');

        // Calcular data de fim se tiver duração
        let dataFim = 'Sem prazo definido';
        if (ativo.duracaoMeses > 0) {
            const dataFimDate = new Date(ativo.dataInicio);
            dataFimDate.setMonth(dataFimDate.getMonth() + ativo.duracaoMeses);
            dataFim = dataFimDate.toLocaleDateString('pt-PT');
        }

        // Atualizar título e subtítulo do modal
        document.getElementById('detalhesAtivoTitulo').textContent = ativo.nome;
        document.getElementById('detalhesAtivoSubtitulo').textContent = `📁 ${nomeCarteira}`;

        // Preencher informações básicas
        document.getElementById('detalhesAtivoInfo').innerHTML = `
            <div class="flex justify-between items-center">
                <span class="text-gray-400">ID do Ativo:</span>
                <span class="text-white font-medium">${ativo.id}</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">Nome:</span>
                <span class="text-white font-medium">${ativo.nome}</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">ID da Carteira:</span>
                <span class="text-white font-medium">${ativo.carteiraId}</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">Carteira:</span>
                <span class="text-primary-400 font-medium">${nomeCarteira}</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">Data de Início:</span>
                <span class="text-white font-medium">${dataInicio}</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">Data/Hora Completa:</span>
                <span class="text-white font-medium text-sm">${dataInicioCompleta}</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">Duração:</span>
                <span class="text-white font-medium">${ativo.duracaoMeses} meses</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">Data de Fim:</span>
                <span class="text-white font-medium">${dataFim}</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">Taxa de Imposto:</span>
                <span class="text-white font-medium">${ativo.taxaImposto}%</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-gray-400">User ID:</span>
                <span class="text-white font-medium">${ativo.userId}</span>
            </div>
        `;

        // Carregar informações financeiras e investimentos relacionados
        carregarInformacoesFinanceiras(ativoId);
        carregarInvestimentosRelacionados(ativoId);

        // Mostrar o modal
        const modal = document.getElementById('detalhesAtivoModal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    }

    async function carregarInformacoesFinanceiras(ativoId) {
        try {
            const detailedInfo = await getDetailedAssetInfo(ativos.find(a => a.id === ativoId));
            const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });

            // Calcular informações financeiras
            const valorInvestido = detailedInfo.valorInvestidoTotal || detailedInfo.valorInvestido || 0;
            const valorAtual = detailedInfo.valorAtualTotal || detailedInfo.valorAtual || 0;
            const lucro = detailedInfo.lucroTotal || detailedInfo.lucro || 0;
            const lucroPercentual = valorInvestido > 0 ? (lucro / valorInvestido * 100) : 0;

            const lucroClass = lucro >= 0 ? 'text-green-400' : 'text-red-400';

            document.getElementById('detalhesAtivoFinanceiro').innerHTML = `
                <div class="flex justify-between items-center">
                    <span class="text-gray-400">Tipo de Investimento:</span>
                    <span class="text-blue-400 font-medium">${detailedInfo.tipo}</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-400">Valor Investido:</span>
                    <span class="text-white font-medium">${formatter.format(valorInvestido)}</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-400">Lucro/Prejuízo:</span>
                    <span class="${lucroClass} font-bold">${formatter.format(lucro)}</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-gray-400">Rentabilidade:</span>
                    <span class="${lucroClass} font-bold">${lucroPercentual.toFixed(2)}%</span>
                </div>
                ${detailedInfo.detalhes && detailedInfo.detalhes.length >= 1 ? `
                <div class="pt-3 mt-3 border-t border-gray-600">
                    <div class="flex justify-between items-center">
                        <span class="text-purple-400 font-medium">Total de Investimentos:</span>
                        <span class="text-purple-400 font-bold">${detailedInfo.detalhes.length}</span>
                    </div>
                </div>
                ` : ''}
            `;
        } catch (error) {
            console.error('Erro ao carregar informações financeiras:', error);
            document.getElementById('detalhesAtivoFinanceiro').innerHTML = `
                <div class="text-center text-red-400">
                    Erro ao carregar informações financeiras
                </div>
            `;
        }
    }

    function carregarInvestimentosRelacionados(ativoId) {
        // Debug: Log all asset data and the target ativo ID
        console.log('===== DEBUG: Procurando investimentos para Ativo ID:', ativoId, '=====');
        console.log('Todos os depósitos disponíveis:', window.allAssetData?.depositos);
        console.log('Todos os fundos disponíveis:', window.allAssetData?.fundos);
        console.log('Todos os imóveis disponíveis:', window.allAssetData?.imoveis);

        // Check field names in actual data
        if (window.allAssetData?.depositos?.length > 0) {
            console.log('Exemplo de depósito - propriedades:', Object.keys(window.allAssetData.depositos[0]));
        }
        if (window.allAssetData?.fundos?.length > 0) {
            console.log('Exemplo de fundo - propriedades:', Object.keys(window.allAssetData.fundos[0]));
        }
        if (window.allAssetData?.imoveis?.length > 0) {
            console.log('Exemplo de imóvel - propriedades:', Object.keys(window.allAssetData.imoveis[0]));
        }

        // Try multiple possible field names for filtering
        const depositosRelacionados = window.allAssetData?.depositos?.filter(d =>
            d.ativoFinaceiroId === ativoId ||
            d.ativoFinanceiroId === ativoId ||
            d.ativoId === ativoId
        ) || [];

        const fundosRelacionados = window.allAssetData?.fundos?.filter(f =>
            f.ativoFinaceiroId === ativoId ||
            f.ativoFinanceiroId === ativoId ||
            f.ativoId === ativoId
        ) || [];

        const imoveisRelacionados = window.allAssetData?.imoveis?.filter(i =>
            i.ativoFinaceiroId === ativoId ||
            i.ativoFinanceiroId === ativoId ||
            i.ativoId === ativoId
        ) || [];

        console.log('Investimentos relacionados encontrados para ativo ID:', ativoId, {
            depositos: depositosRelacionados.length,
            fundos: fundosRelacionados.length,
            imoveis: imoveisRelacionados.length
        });

        // Log the found related investments
        console.log('Depósitos relacionados:', depositosRelacionados);
        console.log('Fundos relacionados:', fundosRelacionados);
        console.log('Imóveis relacionados:', imoveisRelacionados);

        // Configurar tabs
        setupInvestmentTabs(depositosRelacionados, fundosRelacionados, imoveisRelacionados);

        // Preencher conteúdo das tabs
        preencherListaDepositos(depositosRelacionados);
        preencherListaFundos(fundosRelacionados);
        preencherListaImoveis(imoveisRelacionados);

        // Mostrar tab apropriada baseada no que tem conteúdo
        const hasDepositos = depositosRelacionados.length > 0;
        const hasFundos = fundosRelacionados.length > 0;
        const hasImoveis = imoveisRelacionados.length > 0;

        if (hasDepositos) {
            showTab('Depositos');
        } else if (hasFundos) {
            showTab('Fundos');
        } else if (hasImoveis) {
            showTab('Imoveis');
        } else {
            showEmptyInvestments();
        }
    }

    function setupInvestmentTabs(depositos, fundos, imoveis) {
        const tabDepositos = document.getElementById('tabDepositos');
        const tabFundos = document.getElementById('tabFundos');
        const tabImoveis = document.getElementById('tabImoveis');

        // Atualizar texto dos tabs com contagem
        tabDepositos.textContent = `Depósitos a Prazo (${depositos.length})`;
        tabFundos.textContent = `Fundos de Investimento (${fundos.length})`;
        tabImoveis.textContent = `Imóveis Arrendados (${imoveis.length})`;

        // Remover event listeners existentes e adicionar novos
        tabDepositos.replaceWith(tabDepositos.cloneNode(true));
        tabFundos.replaceWith(tabFundos.cloneNode(true));
        tabImoveis.replaceWith(tabImoveis.cloneNode(true));

        // Obter referências aos novos elementos
        const newTabDepositos = document.getElementById('tabDepositos');
        const newTabFundos = document.getElementById('tabFundos');
        const newTabImoveis = document.getElementById('tabImoveis');

        // Adicionar event listeners
        newTabDepositos.addEventListener('click', () => showTab('Depositos'));
        newTabFundos.addEventListener('click', () => showTab('Fundos'));
        newTabImoveis.addEventListener('click', () => showTab('Imoveis'));
    }

    function showTab(tabName) {
        // Esconder todos os conteúdos
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.add('hidden');
        });
        document.getElementById('emptyInvestments').classList.add('hidden');

        // Remover classe ativa de todos os tabs
        document.querySelectorAll('#tabDepositos, #tabFundos, #tabImoveis').forEach(tab => {
            tab.classList.remove('bg-primary-600', 'text-white');
            tab.classList.add('text-gray-400');
        });

        // Mostrar conteúdo selecionado e ativar tab
        const contentId = `content${tabName}`;
        const tabId = `tab${tabName}`;

        document.getElementById(contentId).classList.remove('hidden');
        const activeTab = document.getElementById(tabId);
        activeTab.classList.add('bg-primary-600', 'text-white');
        activeTab.classList.remove('text-gray-400');
    }

    function showEmptyInvestments() {
        // Esconder todos os conteúdos
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.add('hidden');
        });

        // Mostrar estado vazio
        document.getElementById('emptyInvestments').classList.remove('hidden');
    }

    function preencherListaDepositos(depositos) {
        const lista = document.getElementById('listaDepositos');
        const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });

        if (depositos.length === 0) {
            lista.innerHTML = `
                <div class="text-center py-4">
                    <p class="text-gray-400">Nenhum depósito a prazo encontrado para este ativo.</p>
                </div>
            `;
            return;
        }

        lista.innerHTML = depositos.map(deposito => {
            const dataCriacao = deposito.dataCriacao ?
                new Date(deposito.dataCriacao).toLocaleDateString('pt-PT') : 'Não definido';
            return `
            <div class="bg-gray-700/50 rounded-lg p-4 border border-gray-600">
                <div class="flex justify-between items-start mb-3">
                <h4 class="text-white font-medium">Depósito a Prazo</h4>
                <span class="text-blue-400 text-sm">ID: ${deposito.id}</span>
                </div>
                <div class="grid grid-cols-2 gap-3 text-sm">
                <div>
                    <span class="text-gray-400">Valor Investido:</span>
                    <div class="text-white font-medium">${formatter.format(deposito.valorInvestido || 0)}</div>
                </div>
                <div>
                    <span class="text-gray-400">Valor Atual:</span>
                    <div class="text-white font-medium">${formatter.format(deposito.valorAtual || 0)}</div>
                </div>
                <div>
                    <span class="text-gray-400">Taxa de Juro Anual:</span>
                    <div class="text-white font-medium">${deposito.taxaJuroAnual || 0}%</div>
                </div>
                <div>
                    <span class="text-gray-400">Data de Criação:</span>
                    <div class="text-white font-medium">${dataCriacao}</div>
                </div>
                </div>
            </div>
            `;
        }).join('');
    }

    function preencherListaFundos(fundos) {
        const lista = document.getElementById('listaFundos');
        const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });

        if (fundos.length === 0) {
            lista.innerHTML = `
                <div class="text-center py-4">
                    <p class="text-gray-400">Nenhum fundo de investimento encontrado para este ativo.</p>
                </div>
            `;
            return;
        }

        lista.innerHTML = fundos.map(fundo => {
            const dataCompra = fundo.dataCriacao ?
                new Date(fundo.dataCriacao).toLocaleDateString('pt-PT') : 'Não definido';

            return `
                <div class="bg-gray-700/50 rounded-lg p-4 border border-gray-600">
                    <div class="flex justify-between items-start mb-3">
                        <h4 class="text-white font-medium">${fundo.ativoSigla || 'Fundo de Investimento'}</h4>
                        <span class="text-green-400 text-sm">ID: ${fundo.id}</span>
                    </div>
                    <div class="grid grid-cols-2 gap-3 text-sm">
                        <div>
                            <span class="text-gray-400">Montante Investido:</span>
                            <div class="text-white font-medium">${formatter.format(fundo.montanteInvestido || 0)}</div>
                        </div>
                        <div>
                            <span class="text-gray-400">Data de Compra:</span>
                            <div class="text-white font-medium">${dataCompra}</div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    function preencherListaImoveis(imoveis) {
        const lista = document.getElementById('listaImoveis');
        const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });

        if (imoveis.length === 0) {
            lista.innerHTML = `
                <div class="text-center py-4">
                    <p class="text-gray-400">Nenhum imóvel arrendado encontrado para este ativo.</p>
                </div>
            `;
            return;
        }

        lista.innerHTML = imoveis.map(imovel => {
            const dataCompra = imovel.dataCriacao ?
                new Date(imovel.dataCriacao).toLocaleDateString('pt-PT') : 'Não definido';

            return `
                <div class="bg-gray-700/50 rounded-lg p-4 border border-gray-600">
                    <div class="flex justify-between items-start mb-3">
                        <h4 class="text-white font-medium">${imovel.endereco || 'Imóvel Arrendado'}</h4>
                        <span class="text-orange-400 text-sm">ID: ${imovel.id}</span>
                    </div>
                    <div class="grid grid-cols-2 gap-3 text-sm">
                        <div>
                            <span class="text-gray-400">Valor do Imóvel:</span>
                            <div class="text-white font-medium">${formatter.format(imovel.valorImovel || imovel.valorCompra || 0)}</div>
                        </div>
                        <div>
                            <span class="text-gray-400">Renda Mensal:</span>
                            <div class="text-white font-medium">${formatter.format(imovel.valorRenda || 0)}</div>
                        </div>
                        <div>
                            <span class="text-gray-400">Data de Compra:</span>
                            <div class="text-white font-medium">${dataCompra}</div>
                        </div>
                        ${imovel.endereco ? `
                        <div class="col-span-2">
                            <span class="text-gray-400">Endereço:</span>
                            <div class="text-white font-medium">${imovel.endereco}</div>
                        </div>
                        ` : ''}
                        ${imovel.observacoes ? `
                        <div class="col-span-2">
                            <span class="text-gray-400">Observações:</span>
                            <div class="text-white font-medium">${imovel.observacoes}</div>
                        </div>
                        ` : ''}
                    </div>
                </div>
            `;
        }).join('');
    }

    function fecharModalDetalhesAtivo() {
        const modal = document.getElementById('detalhesAtivoModal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    }

    /**
     * Verifica se há uma navegação pendente da página de carteiras
     * e automaticamente abre os detalhes do ativo solicitado
     */
    function verificarNavegacaoParaAtivo() {
        try {
            // Verificar se há dados de navegação no sessionStorage
            const navegacaoData = sessionStorage.getItem('navegarParaAtivo');
            
            if (navegacaoData) {
                console.log('Navegação detectada da página de carteiras');
                
                const ativoData = JSON.parse(navegacaoData);
                const ativoId = ativoData.id;
                
                console.log('Tentando mostrar detalhes do ativo:', ativoId);
                
                // Limpar o sessionStorage para não repetir a ação
                sessionStorage.removeItem('navegarParaAtivo');
                
                // Aguardar um pouco para garantir que a página foi totalmente carregada
                setTimeout(() => {
                    // Verificar se o ativo existe na lista carregada
                    const ativo = ativos.find(a => a.id === ativoId);
                    
                    if (ativo) {
                        console.log('Ativo encontrado, abrindo modal de detalhes');
                        verDetalhesAtivo(ativoId);
                        
                        // Mostrar toast de confirmação
                        showToast(`Exibindo detalhes do ativo "${ativo.nome}"`, 'success');
                    } else {
                        console.warn('Ativo não encontrado na lista:', ativoId);
                        showToast('Ativo não encontrado', 'error');
                    }
                }, 500);
            }
        } catch (error) {
            console.error('Erro ao verificar navegação para ativo:', error);
            // Limpar sessionStorage em caso de erro
            sessionStorage.removeItem('navegarParaAtivo');
        }
    }

    // Variáveis para operações com ativos
    let ativoParaEliminar = null;
    let ativoParaTransferir = null;
    let carteiraAtual = null;

    // Função para abrir o modal de confirmação de eliminação
    function eliminarAtivo(ativoId, event) {
        // Impede a propagação do evento para não ativar outras ações
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }

        ativoParaEliminar = ativoId;
        const ativo = ativos.find(a => a.id === ativoId);

        if (!ativo) {
            showToast('Ativo não encontrado.', 'error');
            return;
        }

        // Procurar detalhes específicos do ativo
        let tipoAtivo = 'Ativo Financeiro';
        let valorAtual = 0;

        // Verifica o tipo específico de ativo para mostrar informações detalhadas
        if (window.allAssetData) {
            // Check for deposit
            const deposito = window.allAssetData.depositos.find(d => d.ativoFinaceiroId === ativoId);
            if (deposito) {
                tipoAtivo = 'Depósito a Prazo';
                valorAtual = deposito.valorAtual || deposito.valorInvestido || 0;
            }

            // Check for fund
            const fundo = window.allAssetData.fundos.find(f => f.ativoFinaceiroId === ativoId);
            if (fundo) {
                tipoAtivo = 'Fundo de Investimento';
                valorAtual = fundo.montanteInvestido || 0;
            }

            // Check for real estate
            const imovel = window.allAssetData.imoveis.find(i => i.ativoFinaceiroId === ativoId);
            if (imovel) {
                tipoAtivo = 'Imóvel Arrendado';
                valorAtual = imovel.valorImovel || imovel.valorCompra || 0;
            }
        }

        // Encontrar a carteira do ativo
        const carteira = carteiras.find(c => c.id === ativo.carteiraId);
        const nomeCarteira = carteira ? carteira.nome : 'Carteira não encontrada';

        // Formatar valores para exibição
        const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });
        const valorFormatado = formatter.format(valorAtual);

        // Atualizar informações no modal
        document.getElementById('deleteAtivoInfo').innerHTML = `
            <strong>${ativo.nome}</strong><br>
            <span class="text-gray-400">Tipo: ${tipoAtivo}</span><br>
            <span class="text-gray-400">Carteira: ${nomeCarteira}</span><br>
            <span class="text-gray-400">Valor: ${valorFormatado}</span>
        `;

        // Mostrar o modal
        const modal = document.getElementById('eliminarAtivoModal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    }

    // Função para fechar o modal de confirmação
    function fecharModalEliminarAtivo() {
        const modal = document.getElementById('eliminarAtivoModal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        ativoParaEliminar = null;
    }

    // Função para confirmar e executar a eliminação do ativo
    async function confirmarEliminarAtivo() {
        if (!ativoParaEliminar) {
            showToast('Nenhum ativo selecionado para eliminar.', 'error');
            return;
        }

        try {
            // Mostrar estado de carregamento no botão
            const btnConfirm = document.getElementById('confirmarEliminarAtivo');
            const originalText = btnConfirm.textContent;
            btnConfirm.disabled = true;
            btnConfirm.innerHTML = '<div class="flex items-center justify-center"><div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>A eliminar...</div>';

            // Fazer a requisição de eliminação
            const response = await fetch(`/api/ativofinanceiro/remover?ativoFinanceiroId=${ativoParaEliminar}`, {
                method: 'DELETE',
                credentials: 'include'
            });

            // Restaurar botão
            btnConfirm.disabled = false;
            btnConfirm.textContent = originalText;

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            // Fechar o modal
            fecharModalEliminarAtivo();

            // Mostrar mensagem de sucesso
            showToast('Ativo eliminado com sucesso!', 'success');

            // Recarregar os dados para atualizar a interface
            await carregarDados();

        } catch (error) {
            console.error('Erro ao eliminar ativo:', error);
            showToast('Erro ao eliminar ativo. Por favor, tente novamente.', 'error');
            fecharModalEliminarAtivo();
        }
    }

    // Função para abrir o modal de transferência de ativo
    function transferirAtivo(ativoId, event) {
        // Impede a propagação do evento para não ativar outras ações
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }

        ativoParaTransferir = ativoId;
        const ativo = ativos.find(a => a.id === ativoId);

        if (!ativo) {
            showToast('Ativo não encontrado.', 'error');
            return;
        }

        // Encontrar a carteira atual do ativo
        const carteira = carteiras.find(c => c.id === ativo.carteiraId);
        carteiraAtual = carteira;
        const nomeCarteira = carteira ? carteira.nome : 'Carteira não encontrada';

        // Procurar detalhes específicos do ativo
        let tipoAtivo = 'Ativo Financeiro';
        let valorAtual = 0;

        // Verifica o tipo específico de ativo para mostrar informações detalhadas
        if (window.allAssetData) {
            // Check for deposit
            const deposito = window.allAssetData.depositos.find(d => d.ativoFinaceiroId === ativoId);
            if (deposito) {
                tipoAtivo = 'Depósito a Prazo';
                valorAtual = deposito.valorAtual || deposito.valorInvestido || 0;
            }

            // Check for fund
            const fundo = window.allAssetData.fundos.find(f => f.ativoFinaceiroId === ativoId);
            if (fundo) {
                tipoAtivo = 'Fundo de Investimento';
                valorAtual = fundo.montanteInvestido || 0;
            }

            // Check for real estate
            const imovel = window.allAssetData.imoveis.find(i => i.ativoFinaceiroId === ativoId);
            if (imovel) {
                tipoAtivo = 'Imóvel Arrendado';
                valorAtual = imovel.valorImovel || imovel.valorCompra || 0;
            }
        }

        // Formatar valores para exibição
        const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });
        const valorFormatado = formatter.format(valorAtual);

        // Atualizar informações no modal
        document.getElementById('transferAtivoInfo').innerHTML = `
            <strong>${ativo.nome}</strong><br>
            <span class="text-gray-400">Tipo: ${tipoAtivo}</span><br>
            <span class="text-gray-400">Carteira Atual: ${nomeCarteira}</span><br>
            <span class="text-gray-400">Valor: ${valorFormatado}</span>
        `;

        // Preencher select de carteiras de destino
        preencherSelectCarteirasDestino(ativo.carteiraId);

        // Mostrar o modal
        const modal = document.getElementById('transferirAtivoModal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    }

    // Função para preencher o select de carteiras de destino (excluindo a carteira atual)
    function preencherSelectCarteirasDestino(carteiraAtualId) {
        const select = document.getElementById('carteiraDestinoSelect');

        // Limpar opções existentes
        while (select.options.length > 1) {
            select.remove(1);
        }

        // Adicionar carteiras como opções (exceto a carteira atual)
        carteiras.forEach(carteira => {
            if (carteira.id !== carteiraAtualId) {
                const option = document.createElement('option');
                option.value = carteira.id;
                option.textContent = carteira.nome;
                select.appendChild(option);
            }
        });
    }

    // Função para fechar o modal de transferência
    function fecharModalTransferirAtivo() {
        const modal = document.getElementById('transferirAtivoModal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        ativoParaTransferir = null;
        carteiraAtual = null;
    }

    // Função para confirmar e executar a transferência do ativo
    async function confirmarTransferirAtivo() {
        const select = document.getElementById('carteiraDestinoSelect');
        const carteiraDestinoId = select.value;

        if (!ativoParaTransferir) {
            showToast('Nenhum ativo selecionado para transferir.', 'error');
            return;
        }

        if (!carteiraDestinoId) {
            showToast('Selecione uma carteira de destino.', 'error');
            return;
        }

        // Mostrar estado de carregamento no botão
        const btnConfirm = document.getElementById('confirmarTransferirAtivo');
        const originalText = btnConfirm.textContent;
        btnConfirm.disabled = true;
        btnConfirm.innerHTML = '<div class="flex items-center justify-center"><div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>A transferir...</div>';

        try {
            // Preparar dados para a requisição
            const transferData = {
                userId: -1,
                ativoFinanceiroIds: [ativoParaTransferir],
                novaCarteiraId: parseInt(carteiraDestinoId)
            };

            console.log('Enviando requisição de transferência:', transferData);

            // Fazer a requisição de transferência
            const response = await fetch('/api/ativofinanceiro/transferir', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify(transferData)
            });

            console.log('Resposta recebida:', { status: response.status, ok: response.ok });

            // Restaurar botão
            btnConfirm.disabled = false;
            btnConfirm.textContent = originalText;

            // Verificar se a resposta foi bem-sucedida
            if (response.ok) {
                // Encontrar nomes das carteiras para mensagem
                const carteiraOrigem = carteiras.find(c => c.id === carteiraAtual.id)?.nome || 'Carteira anterior';
                const carteiraDestino = carteiras.find(c => c.id === parseInt(carteiraDestinoId))?.nome || 'Nova carteira';

                // Fechar o modal antes de mostrar a mensagem de sucesso
                fecharModalTransferirAtivo();

                // Mostrar mensagem de sucesso
                showToast(`Ativo transferido com sucesso de ${carteiraOrigem} para ${carteiraDestino}!`, 'success');

                // Recarregar os dados para atualizar a interface
                await carregarDados();
            } else {
                // Se a resposta não foi ok, lançar um erro
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
        } catch (error) {
            console.error('Erro ao transferir ativo:', error);

            // Restaurar botão caso ainda não tenha sido feito
            if (btnConfirm.disabled) {
                btnConfirm.disabled = false;
                btnConfirm.textContent = originalText;
            }

            // Mostrar mensagem de erro
            showToast('Erro ao transferir ativo. Por favor, tente novamente.', 'error');
        }
    }

    // Função para mostrar toast notifications
    function showToast(message, type = 'info') {
        // Criar elemento do toast se não existir
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'fixed top-20 right-4 z-50 space-y-2';
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement('div');
        const bgColor = type === 'success' ? 'bg-green-600' : type === 'error' ? 'bg-red-600' : 'bg-blue-600';

        toast.className = `${bgColor} text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full opacity-0`;
        toast.textContent = message;

        toastContainer.appendChild(toast);

        // Animar entrada
        setTimeout(() => {
            toast.classList.remove('translate-x-full', 'opacity-0');
        }, 100);

        // Remover após 3 segundos
        setTimeout(() => {
            toast.classList.add('translate-x-full', 'opacity-0');
            setTimeout(() => {
                if (toastContainer.contains(toast)) {
                    toastContainer.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }

    /**
     * Fetch data from all asset-specific APIs with performance optimizations
     */
    async function fetchAllAssetData() {
        try {
            console.log('Fetching data from asset-specific APIs...');

            // Clear cache when fetching new data
            clearAssetInfoCache();

            // Use Promise.allSettled to prevent one failing API from blocking others
            const results = await Promise.allSettled([
                fetchDepositos(),
                fetchFundos(),
                fetchImoveis()
            ]);

            // Extract results, handling any rejections gracefully
            const depositos = results[0].status === 'fulfilled' ? results[0].value : [];
            const fundos = results[1].status === 'fulfilled' ? results[1].value : [];
            const imoveis = results[2].status === 'fulfilled' ? results[2].value : [];

            // Log any failures
            results.forEach((result, index) => {
                if (result.status === 'rejected') {
                    const apiName = ['depositos', 'fundos', 'imoveis'][index];
                    console.warn(`Failed to load ${apiName}:`, result.reason);
                }
            });

            // Update the global variable
            window.allAssetData = {
                depositos: depositos || [],
                fundos: fundos || [],
                imoveis: imoveis || [],
                lucrosPorAtivo: {} // Armazenar os lucros calculados por ativoFinanceiroId
            };

            // Optimization: Only calculate profits if there's actual data
            if (depositos.length > 0 || fundos.length > 0 || imoveis.length > 0) {
                console.log('Calculando lucros por ativo financeiro...');
                window.allAssetData.lucrosPorAtivo = await calcularLucroPorAtivoFinanceiro();
                console.log('Lucros por ativo financeiro calculados:', window.allAssetData.lucrosPorAtivo);
            }

            console.log('Asset data loaded:', window.allAssetData);

        } catch (error) {
            console.error('Error fetching asset data:', error);
            // Initialize with empty arrays to prevent errors
            window.allAssetData = {
                depositos: [],
                fundos: [],
                imoveis: [],
                lucrosPorAtivo: {}
            };
        }
    }

    async function getDetailedAssetInfo(ativo) {
        let detailedInfo = {
            tipo: 'Ativo Financeiro',
            lucro: 0,
            lucroPercentual: 0,
            valorAtual: ativo.valorInvestido || 0,
            valorInvestido: ativo.valorInvestido || 0,
            valorAtualTotal: 0,
            lucroTotal: 0,
            detalhes: []
        };

        try {
            // Check if allAssetData exists and is initialized
            if (!window.allAssetData) {
                return detailedInfo;
            }

            // Verificar se temos dados de lucro agregado para este ativo
            if (window.allAssetData.lucrosPorAtivo && window.allAssetData.lucrosPorAtivo[ativo.id]) {
                const dadosAgregados = window.allAssetData.lucrosPorAtivo[ativo.id];
                detailedInfo.tipo = dadosAgregados.tipo;
                detailedInfo.lucroTotal = dadosAgregados.lucroTotal;
                detailedInfo.valorAtualTotal = dadosAgregados.valorAtualTotal;
                detailedInfo.valorInvestidoTotal = dadosAgregados.valorInvestidoTotal;
                detailedInfo.detalhes = dadosAgregados.detalhes;

                // Calcular percentual de lucro
                if (dadosAgregados.valorInvestidoTotal > 0) {
                    detailedInfo.lucroPercentual = (dadosAgregados.lucroTotal / dadosAgregados.valorInvestidoTotal) * 100;
                }

                console.log(`Dados agregados encontrados para ativo ${ativo.id}:`, dadosAgregados);
            }

            // Try to find matching data in specific asset types
            let specificAsset = null;

            // Check if it's a deposit
            specificAsset = window.allAssetData.depositos.find(d => d.ativoFinaceiroId === ativo.id);
            if (specificAsset) {
                detailedInfo.tipo = 'Depósito a Prazo';
                const profit = await calcularLucroDeposito(specificAsset);
                const profitPercent = await calcularPorcentagemLucroDeposito(specificAsset);
                detailedInfo.lucro = profit;
                detailedInfo.lucroPercentual = profitPercent;
                detailedInfo.valorAtual = specificAsset.valorAtual || specificAsset.valorInvestido || 0;
                detailedInfo.valorInvestido = specificAsset.valorInvestido || 0;
                return detailedInfo;
            }

            // Check if it's a fund
            specificAsset = window.allAssetData.fundos.find(f => f.ativoFinaceiroId === ativo.id);
            if (specificAsset) {
                detailedInfo.tipo = 'Fundo de Investimento';
                console.log(`Found fund asset for ${ativo.nome}:`, specificAsset);

                try {
                    const profit = await calcularLucroFundoInvestimento(specificAsset);
                    const profitPercent = await calcularPorcentagemLucroFundoInvestimento(specificAsset);

                    console.log(`Calculated values for ${ativo.nome}:`, {
                        profit,
                        profitPercent,
                        montanteInvestido: specificAsset.montanteInvestido
                    });

                    detailedInfo.lucro = profit;
                    detailedInfo.lucroPercentual = profitPercent;
                } catch (error) {
                    console.error('Erro ao calcular lucro do fundo:', error);
                    detailedInfo.lucro = 0;
                    detailedInfo.lucroPercentual = 0;
                }
                detailedInfo.valorAtual = specificAsset.valorAtual || specificAsset.montanteInvestido || 0;
                detailedInfo.valorInvestido = specificAsset.montanteInvestido || 0;

                console.log(`Final detailedInfo for ${ativo.nome}:`, detailedInfo);
                return detailedInfo;
            }

            // Check if it's real estate
            specificAsset = window.allAssetData.imoveis.find(i => i.ativoFinaceiroId === ativo.id);
            if (specificAsset) {
                detailedInfo.tipo = 'Imóvel Arrendado';
                const profit = await calcularLucroImovel(specificAsset);
                const profitPercent = await calcularPorcentagemLucroImovel(specificAsset);
                detailedInfo.lucro = profit;
                detailedInfo.lucroPercentual = profitPercent;
                detailedInfo.valorAtual = specificAsset.valorAtual || specificAsset.valorImovel || specificAsset.valorCompra || 0;
                detailedInfo.valorInvestido = specificAsset.valorCompra || specificAsset.valorImovel || 0;
                return detailedInfo;
            }

            // Default case - no specific asset type found
            return detailedInfo;

        } catch (error) {
            console.error('Error getting detailed asset info:', error);
            return detailedInfo;
        }
    }

    async function calculateAssetSummary() {
        const summary = {
            totalValue: 0,
            totalProfit: 0,
            breakdown: {
                depositos: 0,
                fundos: 0,
                imoveis: 0
            }
        };

        try {
            // Check if window.allAssetData exists
            if (!window.allAssetData) {
                return summary;
            }

            // Count and calculate values for each asset type
            summary.breakdown.depositos = window.allAssetData.depositos.length;
            summary.breakdown.fundos = window.allAssetData.fundos.length;
            summary.breakdown.imoveis = window.allAssetData.imoveis.length;

            // Calculate total values
            const depositosValue = window.allAssetData.depositos.reduce((sum, d) => sum + (d.valorAtual || d.valorInvestido || 0), 0);
            const fundosValue = window.allAssetData.fundos.reduce((sum, f) => sum + (f.valorAtual || f.montanteInvestido || 0), 0);
            const imoveisValue = window.allAssetData.imoveis.reduce((sum, i) => sum + (i.valorAtual || i.valorImovel || 0), 0);

            summary.totalValue = depositosValue + fundosValue + imoveisValue;

            // Calculate total profit (properly handle async functions)
            let depositosProfit = 0;
            for (const deposito of window.allAssetData.depositos) {
                try {
                    const profit = await calcularLucroDeposito(deposito);
                    depositosProfit += profit;
                } catch (error) {
                    console.error('Error calculating deposito profit:', error);
                }
            }

            let imoveisProfit = 0;
            for (const imovel of window.allAssetData.imoveis) {
                try {
                    const profit = await calcularLucroImovel(imovel);
                    imoveisProfit += profit;
                } catch (error) {
                    console.error('Error calculating imovel profit:', error);
                }
            }

            summary.totalProfit = depositosProfit + imoveisProfit; // Funds profit calculated async

        } catch (error) {
            console.error('Error calculating asset summary:', error);
        }

        return summary;
    }

    /**
     * Calcula o lucro total por ativo financeiro, agrupando todos os tipos de investimentos
     * associados ao mesmo ativoFinanceiroId
     */
    async function calcularLucroPorAtivoFinanceiro() {
        // Objeto para armazenar os resultados agrupados por ativoFinanceiroId
        const lucrosPorAtivo = {};

        try {
            // Verificar se os dados dos ativos estão carregados
            if (!window.allAssetData) {
                console.error('Dados dos ativos não estão carregados');
                return {};
            }

            // Processar depósitos
            for (const deposito of window.allAssetData.depositos) {
                const id = deposito.ativoFinaceiroId;
                if (!id) continue;

                if (!lucrosPorAtivo[id]) {
                    lucrosPorAtivo[id] = {
                        id: id,
                        nome: '',
                        tipo: 'Depósito a Prazo',
                        lucroTotal: 0,
                        valorInvestidoTotal: 0,
                        valorAtualTotal: 0,
                        detalhes: []
                    };
                }

                const lucro = await calcularLucroDeposito(deposito);
                lucrosPorAtivo[id].lucroTotal += lucro;
                lucrosPorAtivo[id].valorInvestidoTotal += deposito.valorInvestido || 0;
                lucrosPorAtivo[id].valorAtualTotal += deposito.valorAtual || deposito.valorInvestido || 0;
                lucrosPorAtivo[id].detalhes.push({
                    tipo: 'Depósito a Prazo',
                    lucro: lucro,
                    valorInvestido: deposito.valorInvestido || 0,
                    valorAtual: deposito.valorAtual || deposito.valorInvestido || 0
                });
            }

            // Processar fundos de investimento
            for (const fundo of window.allAssetData.fundos) {
                const id = fundo.ativoFinaceiroId;
                if (!id) continue;

                if (!lucrosPorAtivo[id]) {
                    lucrosPorAtivo[id] = {
                        id: id,
                        nome: '',
                        tipo: 'Fundo de Investimento',
                        lucroTotal: 0,
                        valorInvestidoTotal: 0,
                        valorAtualTotal: 0,
                        detalhes: []
                    };
                }

                const lucro = await calcularLucroFundoInvestimento(fundo);
                lucrosPorAtivo[id].lucroTotal += lucro;
                lucrosPorAtivo[id].valorInvestidoTotal += fundo.montanteInvestido || 0;
                lucrosPorAtivo[id].valorAtualTotal += fundo.montanteInvestido || 0; 
                lucrosPorAtivo[id].detalhes.push({
                    tipo: 'Fundo de Investimento',
                    lucro: lucro,
                    valorInvestido: fundo.montanteInvestido || 0,
                    valorAtual: fundo.montanteInvestido || 0
                });
            }

            // Processar imóveis
            for (const imovel of window.allAssetData.imoveis) {
                const id = imovel.ativoFinaceiroId;
                if (!id) continue;

                if (!lucrosPorAtivo[id]) {
                    lucrosPorAtivo[id] = {
                        id: id,
                        nome: '',
                        tipo: 'Imóvel Arrendado',
                        lucroTotal: 0,
                        valorInvestidoTotal: 0,
                        valorAtualTotal: 0,
                        detalhes: []
                    };
                }

                const lucro = await calcularLucroImovel(imovel);
                lucrosPorAtivo[id].lucroTotal += lucro;
                lucrosPorAtivo[id].valorInvestidoTotal += imovel.valorCompra || imovel.valorImovel || 0;
                lucrosPorAtivo[id].valorAtualTotal += imovel.valorImovel || imovel.valorCompra || 0;
                lucrosPorAtivo[id].detalhes.push({
                    tipo: 'Imóvel Arrendado',
                    lucro: lucro,
                    valorInvestido: imovel.valorCompra || imovel.valorImovel || 0,
                    valorAtual: imovel.valorImovel || imovel.valorCompra || 0
                });
            }                // Adicionar os nomes dos ativos
            for (const ativoId in lucrosPorAtivo) {
                const ativo = ativos.find(a => a.id.toString() === ativoId.toString());
                if (ativo) {
                    lucrosPorAtivo[ativoId].nome = ativo.nome;
                }
                if (ativo) {
                    lucrosPorAtivo[ativoId].nome = ativo.nome;
                }
            }

            console.log('Lucros por ativo financeiro:', lucrosPorAtivo);
            return lucrosPorAtivo;
        } catch (error) {
            console.error('Erro ao calcular lucro por ativo financeiro:', error);
            return {};
        }
    }

    /**
     * Exibe um relatório de lucros agrupados por ativo financeiro
     */
    async function exibirRelatorioPorAtivo() {
        try {
            const lucrosPorAtivo = await calcularLucroPorAtivoFinanceiro();

            // Criar um array a partir do objeto para poder ordenar
            const ativosArray = Object.values(lucrosPorAtivo);

            // Ordenar por lucro total (do maior para o menor)
            ativosArray.sort((a, b) => b.lucroTotal - a.lucroTotal);

            // Formatar valores monetários
            const formatter = new Intl.NumberFormat('pt-PT', { style: 'currency', currency: 'EUR' });

            // Criar o HTML para o relatório
            let relatorioHTML = `
                <h3 class="text-xl font-semibold text-white mb-4">Relatório de Lucros por Ativo</h3>
                <div class="space-y-4">
            `;

            ativosArray.forEach(ativo => {
                const lucroFormatado = formatter.format(ativo.lucroTotal);
                const valorInvestidoFormatado = formatter.format(ativo.valorInvestidoTotal);
                const valorAtualFormatado = formatter.format(ativo.valorAtualTotal);
                const percentualLucro = ativo.valorInvestidoTotal > 0
                    ? ((ativo.lucroTotal / ativo.valorInvestidoTotal) * 100).toFixed(2)
                    : "0.00";

                const lucroClass = ativo.lucroTotal >= 0 ? "text-green-400" : "text-red-400";

                relatorioHTML += `
                    <div class="bg-gray-800/50 rounded-xl p-4 border border-gray-700">
                        <div class="flex justify-between items-center mb-2">
                            <h4 class="text-lg font-medium text-white">${ativo.nome}</h4>
                            <span class="text-sm ${lucroClass} font-medium">${lucroFormatado} (${percentualLucro}%)</span>
                        </div>
                        <p class="text-gray-400 text-sm mb-2">Tipo principal: ${ativo.tipo}</p>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-400">Investimento:</span>
                            <span class="text-white">${valorInvestidoFormatado}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-400">Valor Atual:</span>
                            <span class="text-white">${valorAtualFormatado}</span>
                        </div>
                    </div>
                `;
            });

            relatorioHTML += `
                </div>
            `;

            // Criar um modal para exibir o relatório
            const modalHTML = `
                <div id="relatorioPorAtivoModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
                    <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl shadow-2xl w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto">
                        <div class="p-6">
                            <div class="flex items-center justify-between mb-6">
                                <h2 class="text-2xl font-bold text-white">Relatório de Lucros por Ativo</h2>
                                <button id="fecharRelatorioPorAtivoModal" class="text-gray-400 hover:text-white transition-colors">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            <div id="relatorioPorAtivoContent" class="space-y-4">
                                ${relatorioHTML}
                            </div>
                            <div class="flex justify-end mt-6">
                                <button id="fecharBtnRelatorioPorAtivo"
                                    class="bg-gray-700 text-white px-6 py-3 rounded-xl hover:bg-gray-600 transition-all duration-200 font-medium">
                                    Fechar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // Adicionar o modal ao DOM se ainda não existir
            if (!document.getElementById('relatorioPorAtivoModal')) {
                document.body.insertAdjacentHTML('beforeend', modalHTML);

                // Adicionar event listeners para fechar o modal
                document.getElementById('fecharRelatorioPorAtivoModal').addEventListener('click', fecharRelatorioPorAtivoModal);
                document.getElementById('fecharBtnRelatorioPorAtivo').addEventListener('click', fecharRelatorioPorAtivoModal);
                document.getElementById('relatorioPorAtivoModal').addEventListener('click', function (e) {
                    if (e.target === this) fecharRelatorioPorAtivoModal();
                });
            } else {
                // Atualizar o conteúdo se o modal já existe
                document.getElementById('relatorioPorAtivoContent').innerHTML = relatorioHTML;
            }

            // Mostrar o modal
            const modal = document.getElementById('relatorioPorAtivoModal');
            modal.classList.remove('hidden');
            modal.classList.add('flex');

        } catch (error) {
            console.error('Erro ao exibir relatório por ativo:', error);
            showToast('Erro ao gerar relatório por ativo.', 'error');
        }
    }

    function fecharRelatorioPorAtivoModal() {
        const modal = document.getElementById('relatorioPorAtivoModal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    }


</script>








<div