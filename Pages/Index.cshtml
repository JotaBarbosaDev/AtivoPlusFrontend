@page
@model AtivoPlusFrontend.Pages.Pages_Index
@{
  ViewData["Title"] = "Index";
  Layout = null;
}
<!DOCTYPE html>
<html lang="pt">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Página Complexa com Animações</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }

    .toast {
      margin-bottom: 10px;
      min-width: 250px;
    }
  </style>
</head>

<body>
  <main class="min-h-screen">
    <section class="bg-gray-50 dark:bg-gray-900">
      <div class="flex flex-col items-center justify-center px-6 py-8 mx-auto h-screen lg:py-0">
        <a href="#" class="flex items-center mb-6 text-2xl font-semibold text-gray-900 dark:text-white">
          <img class="w-8 h-8 mr-2" src="https://flowbite.s3.amazonaws.com/blocks/marketing-ui/logo.svg" alt="logo">
          AtivoPlus
        </a>
        <div
          class="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
          <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
            <h1 class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
              Entre na sua conta
            </h1>
            <form class="space-y-4 md:space-y-6" id="loginForm" method="post">
              <div>
                <label for="username"
                  class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Username</label>
                <input type="text" name="username" id="username" placeholder="username"
                  class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-[#2563eb] focus:border-[#2563eb] block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-[#3b82f6] dark:focus:border-[#3b82f6]"
                  required="">
              </div>
              <div>
                <label for="password"
                  class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
                <input type="password" name="password" id="password" placeholder="••••••••"
                  class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-[#2563eb] focus:border-[#2563eb] block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-[#3b82f6] dark:focus:border-[#3b82f6]"
                  required="">
              </div>
              <div class="flex items-center justify-between">
                <div class="flex items-start">
                  <div class="flex items-center h-5">
                    <input id="remember" aria-describedby="remember" type="checkbox"
                      class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-[#93c5fd] dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-[#2563eb] dark:ring-offset-gray-800">
                  </div>
                  <div class="ml-3 text-sm">
                    <label for="remember" class="text-gray-500 dark:text-gray-300">Relembrar-me</label>
                  </div>
                </div>
                <a href="#" class="text-sm font-medium text-[#2563eb] hover:underline dark:text-[#3b82f6]">Esqueci a
                  Senha?</a>
              </div>
              <button type="submit" id="submitButton"
                class="w-full text-white bg-[#2563eb] hover:bg-[#1d4ed8] focus:ring-4 focus:outline-none focus:ring-[#93c5fd] font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-[#2563eb] dark:hover:bg-[#1d4ed8] dark:focus:ring-[#1e40af]">
                Entrar
              </button>
              <p class="text-sm font-light text-gray-500 dark:text-gray-400">
                Não têm conta? <a asp-page="Registo"
                  class="font-medium text-[#2563eb] hover:underline dark:text-[#3b82f6]">Registar</a>
              </p>
            </form>
          </div>
        </div>
      </div>
    </section>
    <!-- Substituído o div original pelo toast-container -->
    <div class="toast-container" id="toastContainer"></div>
  </main>
</body>

</html>

<script>
  document.getElementById('loginForm').addEventListener('submit', async function (e) {
    e.preventDefault();
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    const submitButton = document.getElementById('submitButton');
    
    // Desabilita o botão e mostra indicador de carregamento
    submitButton.disabled = true;
    submitButton.innerHTML = 'A processar...';

    try {
      const resposta = await fetch(`/api/user/logar`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username: username,
          password: password
        }),
        credentials: 'include'
      });

      console.log(resposta);
      
      // Restaura o botão
      submitButton.disabled = false;
      submitButton.innerHTML = 'Entrar';

      if (resposta.ok) {
        // Mostra o toast de sucesso
        mostrarToast('success', 'Login realizado com sucesso!');
        
        // Redireciona após 2 segundos
        setTimeout(() => {
          window.location.href = '/Geral';
        }, 2000);
      } else {
        // Mostra o toast de erro
        mostrarToast('error', 'Erro no login: ' + (resposta.statusText || 'Credenciais inválidas'));
      }
    } catch (err) {
      // Restaura o botão
      submitButton.disabled = false;
      submitButton.innerHTML = 'Entrar';
      
      // Mostra o toast de erro
      mostrarToast('error', 'Erro ao conectar com o servidor');
      console.error('Erro ao fazer login:', err);
    }
  });
  
  // Função para mostrar toasts
  function mostrarToast(tipo, mensagem) {
    const toastContainer = document.getElementById('toastContainer');
    const toastId = 'toast-' + Date.now();
    
    const icone = tipo === 'success' 
      ? '<svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8.5 8.5a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 13.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>'
      : '<svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20"><path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"></path></svg>';
    
    const corIcone = tipo === 'success' 
      ? 'text-green-500 bg-green-100 dark:bg-green-800 dark:text-green-200'
      : 'text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200';
    
    const toast = document.createElement('div');
    toast.id = toastId;
    toast.className = 'toast flex items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow-lg dark:text-gray-400 dark:bg-gray-800';
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
      <div class="inline-flex items-center justify-center shrink-0 w-8 h-8 ${corIcone} rounded-lg">
        ${icone}
        <span class="sr-only">${tipo === 'success' ? 'Sucesso' : 'Erro'}</span>
      </div>
      <div class="ml-3 text-sm font-normal">${mensagem}</div>
      <button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" onclick="fecharToast('${toastId}')">
        <span class="sr-only">Fechar</span>
        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
        </svg>
      </button>
    `;
    
    toastContainer.appendChild(toast);
    
    // Auto-remover após 5 segundos
    setTimeout(() => {
      fecharToast(toastId);
    }, 5000);
  }
  
  // Função para fechar toasts
  function fecharToast(toastId) {
    const toast = document.getElementById(toastId);
    if (toast) {
      toast.remove();
    }
  }
</script>
