@page
@model AtivoPlusFrontend.Pages.Pages_Carteira
@{
    ViewData["Title"] = "Carteira";
    Layout = "_Layout";
}

<!DOCTYPE html>
<html lang="pt-pt">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Página Complexa com Animações</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .add-carteira-btn {
            background-color: #10B981; /* Verde esmeralda */
            color: white;
            transition: all 0.3s ease;
        }
        
        .add-carteira-btn:hover {
            transform: scale(1.05);
            background-color: #059669; /* Verde mais escuro no hover */
        }
    </style>
</head>
<body>

    <main class="h-auto pt-20">
        <!-- Cabeçalho com título e botão de adicionar -->
        <div class="container mx-auto px-4 mb-6">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-bold text-gray-800 dark:text-gray-200">Minhas Carteiras</h2>
                <button id="novaCarteiraBtn" class="add-carteira-btn py-2 px-4 rounded-md shadow-md flex items-center font-medium" onclick="abrirModal()">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Nova Carteira
                </button>
            </div>
        </div>
        
        <!-- Grid de carteiras -->
        <div class="container mx-auto px-4">
            <div id="carteirasContainer" class="grid lg:grid-cols-2 md:grid-cols-1 sm:gap-8 gap-8 md:gap-4 lg:gap-4 justify-center"></div>
        </div>
    </main>
    
    <!-- Modal para adicionar nova carteira -->
    <div id="novaCarteiraModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-gray-800">Adicionar Nova Carteira</h2>
                <button id="fecharModalBtn" class="text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="mb-4">
                <label for="nomeCarteira" class="block text-gray-700 text-sm font-bold mb-2">Nome da Carteira</label>
                <input type="text" id="nomeCarteira" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Digite o nome da carteira">
            </div>
            <div class="flex justify-end">
                <button id="cancelarBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded mr-2">
                    Cancelar
                </button>
                <button id="salvarCarteiraBtn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                    Salvar
                </button>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toast-container" class="fixed bottom-4 right-4 z-50 space-y-2"></div>

<script>
  // Funções auxiliares
  function showToast(message, type = "info") {
    const toast = document.createElement("div");

    let iconSVG, iconColor;
    switch (type) {
      case "success":
        iconColor = "text-green-600 dark:text-green-500";
        iconSVG = `<svg class="w-5 h-5 ${iconColor}" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414L8.414 15l-4.121-4.121a1 1 0 111.414-1.414L8.414 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>`;
        break;
      case "error":
        iconColor = "text-red-600 dark:text-red-500";
        iconSVG = `<svg class="w-5 h-5 ${iconColor}" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>`;
        break;
      case "warning":
        iconColor = "text-yellow-600 dark:text-yellow-500";
        iconSVG = `<svg class="w-5 h-5 ${iconColor}" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.366-.446.998-.446 1.364 0l7.071 8.625c.329.401.05.986-.437.986H1.303c-.487 0-.766-.585-.437-.986l7.071-8.625zM11 14a1 1 0 10-2 0 1 1 0 002 0zm-.25-3.25a.75.75 0 01-1.5 0v-3a.75.75 0 011.5 0v3z" clip-rule="evenodd"/></svg>`;
        break;
      default:
        iconColor = "text-blue-600 dark:text-blue-500";
        iconSVG = `<svg class="w-5 h-5 ${iconColor}" fill="none" viewBox="0 0 18 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 17 8 2L9 1 1 19l8-2Zm0 0V9"/></svg>`;
    }

    toast.className = "flex items-center w-full max-w-xs p-4 space-x-4 text-gray-500 bg-white divide-x divide-gray-200 rounded-lg shadow-sm dark:text-gray-400 dark:divide-gray-700 dark:bg-gray-800";
    toast.innerHTML = `
      ${iconSVG}
      <div class="ps-4 text-sm font-normal">${message}</div>
    `;

    const container = document.getElementById("toast-container");
    container.appendChild(toast);

    setTimeout(() => {
      toast.classList.add("opacity-0", "transition-opacity", "duration-300");
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }
  
  // Função para abrir o modal
  function abrirModal() {
    const modal = document.getElementById('novaCarteiraModal');
    const nomeCarteiraInput = document.getElementById('nomeCarteira');
    modal.classList.remove('hidden');
    nomeCarteiraInput.value = '';
    nomeCarteiraInput.focus();
  }

  // Função para fechar o modal
  function fecharModal() {
    const modal = document.getElementById('novaCarteiraModal');
    modal.classList.add('hidden');
  }

  document.addEventListener('DOMContentLoaded', async () => {
    const container = document.getElementById('carteirasContainer');
    const fecharModalBtn = document.getElementById('fecharModalBtn');
    const cancelarBtn = document.getElementById('cancelarBtn');
    const salvarCarteiraBtn = document.getElementById('salvarCarteiraBtn');
    const nomeCarteiraInput = document.getElementById('nomeCarteira');
    const modal = document.getElementById('novaCarteiraModal');
    
    // Event listeners para o modal
    fecharModalBtn.addEventListener('click', fecharModal);
    cancelarBtn.addEventListener('click', fecharModal);
    
    // Fechar modal ao clicar fora dele
    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        fecharModal();
      }
    });

    // Salvar nova carteira (corrigindo o userId)
    salvarCarteiraBtn.addEventListener('click', async () => {
      const nome = nomeCarteiraInput.value.trim();
      
      if (!nome) {
        showToast("O nome da carteira é obrigatório.", "warning");
        return;
      }

      
      
      try {
        let userId = -1;
        
        
        const response = await fetch("/api/carteira/adicionar", {
          method: "PUT",
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({ 
            userId: userId, 
            nome: nome 
          })
        });
        
        if (!response.ok) {
          throw new Error("Erro ao criar carteira.");
        }
        
        showToast("Carteira criada com sucesso!", "success");
        fecharModal();
        
        // Recarregar a lista de carteiras
        window.location.reload();
      } catch (error) {
        console.error(error);
        showToast("Erro ao criar carteira.", "error");
      }
    });

    try {
      const response = await fetch("/api/carteira/ver?userIdFromCarteira=-1", {
        credentials: 'include'
      });

      if (!response.ok) throw new Error("Erro ao carregar carteiras.");

      const data = await response.json();

      if (!Array.isArray(data)) throw new Error("Resposta inesperada da API.");

      if (data.length === 0) {
        showToast("Nenhuma carteira encontrada.", "info");
        return;
      }

      data.forEach(carteira => { 
        const nome = carteira.nome ?? "-";
        const tipo = carteira.tipo ?? "-";
        const percentual = carteira.percentual ?? "-";
        const valor = carteira.valor ?? "-";

        const corValor = valor.startsWith('+') ? 'text-green-700 dark:text-green-400' :
                         valor.startsWith('-') ? 'text-red-700 dark:text-red-400' : 'text-gray-500';

        const svgUp = `
          <svg class="w-6 h-6 text-gray-800 dark:text-white group-hover:animate-bounce" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m16 17-4-4-4 4m8-6-4-4-4 4"/>
          </svg>`;
        const svgDown = `
          <svg class="w-6 h-6 text-gray-800 dark:text-white group-hover:animate-bounce" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m8 7 4 4 4-4m-8 6 4 4 4-4"/>
          </svg>`;

        const card = `
          <a href="#" class="group flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row md:max-w-xl hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
            <img class="img w-full rounded-t-lg h-96 ml-4 md:h-auto md:w-48 md:rounded-none md:rounded-s-lg" src="https://www.tracado.pt/img/upload/moradia_ld1/gallery/vcr08---vista-piscina.jpg" alt="">
            <div class="flex flex-col justify-between p-4 leading-normal">
              <div class="flex">
                <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">${nome}</h5>
                <span class="bg-gray-100 text-gray-800 text-xs font-medium me-2 px-1 py-1 rounded-md dark:bg-gray-700 dark:text-gray-400 border border-gray-500 h-6 ml-4">${tipo}</span>
              </div>
              <div class="flex items-center">
                ${valor.startsWith('+') ? svgUp : svgDown}
                <span class="text-gray-700 dark:text-gray-400 flex">${percentual}
                  <p class="${corValor} ml-4 text-medium group-hover:animate-pulse group-hover:font-semibold">${valor}</p>
                </span>
              </div>
            </div>
          </a>
        `;

        container.insertAdjacentHTML('beforeend', card);
      });

      showToast("Carteiras carregadas com sucesso!", "success");
    } catch (error) {
      console.error(error);
      showToast("Erro ao carregar carteiras.", "error");
    }
  });

      
      
</script>

</body>
</html>
