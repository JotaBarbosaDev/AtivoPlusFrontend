@page
@model AtivoPlusFrontend.Pages.Pages_Carteira
@{
  ViewData["Title"] = "Carteira";
  Layout = "_Layout";
}

<div class="min-h-screen bg-gray-950 pt-20 pb-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

    <!-- Header Section -->
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-4xl font-bold bg-gradient-to-r from-primary-400 to-blue-400 bg-clip-text text-transparent mb-2">
          Minhas Carteiras
        </h1>
        <p class="text-gray-400">Gerencie e acompanhe o desempenho das suas carteiras de investimento</p>
      </div>
      <button id="novaCarteiraBtn"
        class="bg-gradient-to-r from-primary-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-primary-700 hover:to-blue-700 focus:ring-4 focus:ring-primary-500/25 transition-all duration-200 transform hover:scale-105 active:scale-95 flex items-center gap-2 font-semibold shadow-lg">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        Nova Carteira
      </button>
    </div>

    <!-- Portfolio Summary -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
      <div class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6">
        <div class="flex items-center justify-between mb-4">
          <div>
            <h3 class="text-lg font-semibold text-white">Carteiras Ativas</h3>
            <p class="text-gray-400 text-sm">Total criadas</p>
          </div>
          <div class="w-12 h-12 bg-blue-500/10 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <span id="totalCarteiras" class="text-2xl font-bold text-white">0</span>
          <span class="text-blue-400 text-sm">carteiras</span>
        </div>
      </div>

      <div class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6">
        <div class="flex items-center justify-between mb-4">
          <div>
            <h3 class="text-lg font-semibold text-white">Total de Ativos</h3>
            <p class="text-gray-400 text-sm">Em todas as carteiras</p>
          </div>
          <div class="w-12 h-12 bg-primary-500/10 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <span id="totalAtivos" class="text-2xl font-bold text-white">0</span>
          <span class="text-primary-400 text-sm">ativos</span>
        </div>
      </div>
    </div>

    <!-- Portfolios Grid -->
    <div id="carteirasContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Portfolios will be loaded here -->
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="text-center py-16 hidden">
      <div class="w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
        </svg>
      </div>
      <h3 class="text-xl font-semibold text-gray-400 mb-2">Nenhuma carteira encontrada</h3>
      <p class="text-gray-500 mb-6">Crie sua primeira carteira para começar a investir</p>
      <button onclick="abrirModal()"
        class="bg-gradient-to-r from-primary-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-primary-700 hover:to-blue-700 transition-all duration-200">
        Criar Primeira Carteira
      </button>
    </div>
  </div>

  <!-- Modal Nova Carteira -->
  <div id="novaCarteiraModal"
    class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div
      class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl p-8 shadow-2xl w-full max-w-md mx-4 transform transition-all duration-300">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-white">Nova Carteira</h2>
        <button id="fecharModalBtn" class="text-gray-400 hover:text-white transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <form id="formNovaCarteira" class="space-y-6">
        <div>
          <label for="nomeCarteira" class="block text-sm font-medium text-gray-300 mb-2">
            Nome da Carteira
          </label>
          <input type="text" id="nomeCarteira" required
            class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-xl text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all duration-200"
            placeholder="Ex: Carteira Conservadora">
        </div>

        <div class="flex gap-3 pt-4">
          <button type="button" id="cancelarBtn"
            class="flex-1 py-3 bg-gray-800 text-gray-300 rounded-xl hover:bg-gray-700 transition-colors duration-200">
            Cancelar
          </button>
          <button type="submit"
            class="flex-1 py-3 bg-gradient-to-r from-primary-600 to-blue-600 text-white rounded-xl hover:from-primary-700 hover:to-blue-700 transition-all duration-200">
            Criar Carteira
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Modal Detalhes da Carteira -->
  <div id="detalhesCarteiraModal"
    class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div
      class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl shadow-2xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-hidden">
      <!-- Header -->
      <div class="bg-gradient-to-r from-primary-600 to-blue-600 p-6 flex justify-between items-center">
        <div class="flex items-center gap-4">
          <h3 id="modalCarteiraNome" class="text-2xl font-bold text-white">Detalhes da Carteira</h3>
          <button id="editarNomeBtn" class="text-white/80 hover:text-white transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
            </svg>
          </button>
        </div>
        <div class="flex items-center gap-3">
          <button id="apagarCarteiraBtn" class="text-white/80 hover:text-white transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
          <button id="fecharDetalhesBtn" class="text-white/80 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Edit Name Form -->
      <div id="editarNomeContainer" class="px-6 py-4 border-b border-gray-800 hidden">
        <div class="flex items-center gap-3">
          <input type="text" id="novoNomeCarteira"
            class="flex-1 px-4 py-2 bg-gray-800/50 border border-gray-700 rounded-xl text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20"
            placeholder="Novo nome da carteira">
          <button id="salvarNomeBtn"
            class="px-4 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-colors">
            Salvar
          </button>
          <button id="cancelarEditarNomeBtn"
            class="px-4 py-2 bg-gray-700 text-gray-300 rounded-xl hover:bg-gray-600 transition-colors">
            Cancelar
          </button>
        </div>
      </div>

      <!-- Content -->
      <div class="p-6 overflow-y-auto max-h-96">
        <!-- Unified Content - Overview and Assets together -->
        <div id="conteudoVisaoGeral">
          <!-- Content will be loaded here by JavaScript -->
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Confirmação Apagar -->
  <div id="confirmarApagarModal"
    class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl p-8 shadow-2xl w-full max-w-md mx-4">
      <div class="text-center">
        <div class="w-16 h-16 bg-red-500/10 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
        </div>
        <h3 class="text-xl font-bold text-white mb-2">Confirmar Exclusão</h3>
        <p class="text-gray-400 mb-6">Tem certeza que deseja apagar esta carteira? Esta ação não pode ser desfeita.
        </p>

        <div class="flex gap-3">
          <button id="cancelarApagarBtn"
            class="flex-1 py-3 bg-gray-800 text-gray-300 rounded-xl hover:bg-gray-700 transition-colors">
            Cancelar
          </button>
          <button id="confirmarApagarBtn"
            class="flex-1 py-3 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors">
            Apagar
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Notifications -->
  <div id="toast-container" class="fixed bottom-4 right-4 z-50 space-y-2"></div>
</div>

<!-- Load required JavaScript files -->
<script src="~/js/ativosCalculos.js"></script>
<script src="~/js/carteira.js"></script>

<script>
  // Modal functions
  function abrirModal() {
    const modal = document.getElementById('novaCarteiraModal');
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    document.getElementById('nomeCarteira').focus();
  }

  function fecharModal() {
    const modal = document.getElementById('novaCarteiraModal');
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    document.getElementById('formNovaCarteira').reset();
  }

  function fecharModalDetalhes() {
    const modal = document.getElementById('detalhesCarteiraModal');
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    esconderEditarNome();
  }

  function mostrarEditarNome() {
    document.getElementById('editarNomeContainer').classList.remove('hidden');
    const nomeAtual = document.getElementById('modalCarteiraNome').textContent;
    document.getElementById('novoNomeCarteira').value = nomeAtual;
    document.getElementById('novoNomeCarteira').focus();
  }

  function esconderEditarNome() {
    document.getElementById('editarNomeContainer').classList.add('hidden');
    document.getElementById('novoNomeCarteira').value = '';
  }

  async function salvarNovoNome() {
    const novoNome = document.getElementById('novoNomeCarteira').value.trim();
    if (!novoNome) {
      showToast("Por favor, insira um nome válido.", "error");
      return;
    }

    try {
      const response = await fetch('/api/carteira/alterarNome', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          carteiraId: carteiraAtualId,
          nome: novoNome
        })
      });

      if (!response.ok) throw new Error("Erro ao atualizar carteira.");

      document.getElementById('modalCarteiraNome').textContent = novoNome;
      esconderEditarNome();
      showToast("Nome da carteira atualizado com sucesso!", "success");
      await refreshPortfolioData();
    } catch (error) {
      console.error(error);
      showToast("Erro ao atualizar nome da carteira.", "error");
    }
  }

  function mostrarConfirmacaoApagar() {
    const modal = document.getElementById('confirmarApagarModal');
    modal.classList.remove('hidden');
    modal.classList.add('flex');
  }

  function esconderConfirmacaoApagar() {
    const modal = document.getElementById('confirmarApagarModal');
    modal.classList.add('hidden');
    modal.classList.remove('flex');
  }

  async function apagarCarteira() {
    try {
      const response = await fetch(`/api/carteira/apagar?carteiraId=${carteiraAtualId}`, {
        method: "DELETE",
        credentials: 'include'
      });

      if (!response.ok) throw new Error("Erro ao apagar carteira.");

      showToast("Carteira apagada com sucesso!", "success");
      esconderConfirmacaoApagar();
      fecharModalDetalhes();
      await refreshPortfolioData();
    } catch (error) {
      console.error(error);
      showToast("Erro ao apagar carteira.", "error");
    }
  }

  // Initialize page when DOM is loaded
  document.addEventListener('DOMContentLoaded', function () {
    // Initialize page
    initCarteiras();

    // Modal event listeners
    const novaCarteiraBtn = document.getElementById('novaCarteiraBtn');
    const fecharModalBtn = document.getElementById('fecharModalBtn');
    const cancelarBtn = document.getElementById('cancelarBtn');
    const formNovaCarteira = document.getElementById('formNovaCarteira');
    const fecharDetalhesBtn = document.getElementById('fecharDetalhesBtn');
    const editarNomeBtn = document.getElementById('editarNomeBtn');
    const salvarNomeBtn = document.getElementById('salvarNomeBtn');
    const cancelarEditarNomeBtn = document.getElementById('cancelarEditarNomeBtn');
    const apagarCarteiraBtn = document.getElementById('apagarCarteiraBtn');
    const confirmarApagarBtn = document.getElementById('confirmarApagarBtn');
    const cancelarApagarBtn = document.getElementById('cancelarApagarBtn');

    if (novaCarteiraBtn) novaCarteiraBtn.addEventListener('click', abrirModal);
    if (fecharModalBtn) fecharModalBtn.addEventListener('click', fecharModal);
    if (cancelarBtn) cancelarBtn.addEventListener('click', fecharModal);
    if (fecharDetalhesBtn) fecharDetalhesBtn.addEventListener('click', fecharModalDetalhes);
    if (editarNomeBtn) editarNomeBtn.addEventListener('click', mostrarEditarNome);
    if (salvarNomeBtn) salvarNomeBtn.addEventListener('click', salvarNovoNome);
    if (cancelarEditarNomeBtn) cancelarEditarNomeBtn.addEventListener('click', esconderEditarNome);
    if (apagarCarteiraBtn) apagarCarteiraBtn.addEventListener('click', mostrarConfirmacaoApagar);
    if (confirmarApagarBtn) confirmarApagarBtn.addEventListener('click', apagarCarteira);
    if (cancelarApagarBtn) cancelarApagarBtn.addEventListener('click', esconderConfirmacaoApagar);

    // Form submission
    if (formNovaCarteira) {
      formNovaCarteira.addEventListener('submit', async function (e) {
        e.preventDefault();

        const nome = document.getElementById('nomeCarteira').value.trim();
        if (!nome) {
          showToast("Por favor, insira um nome para a carteira.", "error");
          return;
        }

        try {
          const response = await fetch('/api/carteira/adicionar', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({
              id: -1,
              userId: -1,
              nome: nome,
              tipo: "Mista",
              percentual: "0%",
              valor: "€0,00"
            })
          });

          if (!response.ok) throw new Error("Erro ao criar carteira.");

          showToast("Carteira criada com sucesso!", "success");
          fecharModal();
          await refreshPortfolioData();
        } catch (error) {
          console.error(error);
          showToast("Erro ao criar carteira.", "error");
        }
      });
    }
  });
</script>
