@page
@model AtivoPlusFrontend.Pages.Pages_Carteira
@{
    ViewData["Title"] = "Carteira";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-950 pt-20">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- Header Section -->
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-4xl font-bold bg-gradient-to-r from-primary-400 to-blue-400 bg-clip-text text-transparent mb-2">
          Minhas Carteiras
        </h1>
        <p class="text-gray-400">Gerencie e acompanhe o desempenho das suas carteiras de investimento</p>
      </div>
      <button id="novaCarteiraBtn" 
        class="bg-gradient-to-r from-primary-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-primary-700 hover:to-blue-700 focus:ring-4 focus:ring-primary-500/25 transition-all duration-200 transform hover:scale-105 active:scale-95 flex items-center gap-2 font-semibold shadow-lg">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
        </svg>
        Nova Carteira
      </button>
    </div>

    <!-- Portfolio Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6">
        <div class="flex items-center justify-between mb-4">
          <div>
            <h3 class="text-lg font-semibold text-white">Total Investido</h3>
            <p class="text-gray-400 text-sm">Todas as carteiras</p>
          </div>
          <div class="w-12 h-12 bg-primary-500/10 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <span id="totalInvestido" class="text-2xl font-bold text-white">€0,00</span>
        </div>
      </div>

      <div class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6">
        <div class="flex items-center justify-between mb-4">
          <div>
            <h3 class="text-lg font-semibold text-white">Retorno Total</h3>
            <p class="text-gray-400 text-sm">Ganhos/Perdas</p>
          </div>
          <div class="w-12 h-12 bg-green-500/10 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
            </svg>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <span id="retornoTotal" class="text-2xl font-bold text-green-400">+€0,00</span>
          <span id="percentualTotal" class="text-green-400 text-sm">+0%</span>
        </div>
      </div>

      <div class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl p-6">
        <div class="flex items-center justify-between mb-4">
          <div>
            <h3 class="text-lg font-semibold text-white">Carteiras Ativas</h3>
            <p class="text-gray-400 text-sm">Total criadas</p>
          </div>
          <div class="w-12 h-12 bg-blue-500/10 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
            </svg>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <span id="totalCarteiras" class="text-2xl font-bold text-white">0</span>
          <span class="text-blue-400 text-sm">carteiras</span>
        </div>
      </div>
    </div>

    <!-- Portfolios Grid -->
    <div id="carteirasContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Portfolios will be loaded here -->
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="text-center py-16 hidden">
      <div class="w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
        </svg>
      </div>
      <h3 class="text-xl font-semibold text-gray-400 mb-2">Nenhuma carteira encontrada</h3>
      <p class="text-gray-500 mb-6">Crie sua primeira carteira para começar a investir</p>
      <button onclick="abrirModal()" 
        class="bg-gradient-to-r from-primary-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-primary-700 hover:to-blue-700 transition-all duration-200">
        Criar Primeira Carteira
      </button>
    </div>
  </div>

  <!-- Modal Nova Carteira -->
  <div id="novaCarteiraModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl p-8 shadow-2xl w-full max-w-md mx-4 transform transition-all duration-300">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-white">Nova Carteira</h2>
        <button id="fecharModalBtn" class="text-gray-400 hover:text-white transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      
      <form id="formNovaCarteira" class="space-y-6">
        <div>
          <label for="nomeCarteira" class="block text-sm font-medium text-gray-300 mb-2">
            Nome da Carteira
          </label>
          <input type="text" id="nomeCarteira" required
            class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-xl text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all duration-200"
            placeholder="Ex: Carteira Conservadora">
        </div>
        
        <div class="flex gap-3 pt-4">
          <button type="button" id="cancelarBtn" 
            class="flex-1 py-3 bg-gray-800 text-gray-300 rounded-xl hover:bg-gray-700 transition-colors duration-200">
            Cancelar
          </button>
          <button type="submit" 
            class="flex-1 py-3 bg-gradient-to-r from-primary-600 to-blue-600 text-white rounded-xl hover:from-primary-700 hover:to-blue-700 transition-all duration-200">
            Criar Carteira
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Modal Detalhes da Carteira -->
  <div id="detalhesCarteiraModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl shadow-2xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-hidden">
      <!-- Header -->
      <div class="bg-gradient-to-r from-primary-600 to-blue-600 p-6 flex justify-between items-center">
        <div class="flex items-center gap-4">
          <h3 id="modalCarteiraNome" class="text-2xl font-bold text-white">Detalhes da Carteira</h3>
          <button id="editarNomeBtn" class="text-white/80 hover:text-white transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
            </svg>
          </button>
        </div>
        <div class="flex items-center gap-3">
          <button id="apagarCarteiraBtn" class="text-white/80 hover:text-white transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
          </button>
          <button id="fecharDetalhesBtn" class="text-white/80 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      </div>

      <!-- Edit Name Form -->
      <div id="editarNomeContainer" class="px-6 py-4 border-b border-gray-800 hidden">
        <div class="flex items-center gap-3">
          <input type="text" id="novoNomeCarteira" 
            class="flex-1 px-4 py-2 bg-gray-800/50 border border-gray-700 rounded-xl text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20"
            placeholder="Novo nome da carteira">
          <button id="salvarNomeBtn" 
            class="px-4 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-colors">
            Salvar
          </button>
          <button id="cancelarEditarNomeBtn" 
            class="px-4 py-2 bg-gray-700 text-gray-300 rounded-xl hover:bg-gray-600 transition-colors">
            Cancelar
          </button>
        </div>
      </div>

      <!-- Tabs -->
      <div class="px-6 pt-4 border-b border-gray-800 flex">
        <button id="tabVisaoGeral" class="px-4 py-2 font-medium text-primary-400 border-b-2 border-primary-400">
          Visão Geral
        </button>
        <button id="tabAtivos" class="px-4 py-2 font-medium text-gray-400 hover:text-white transition-colors">
          Ativos
        </button>
      </div>

      <!-- Content -->
      <div class="p-6 overflow-y-auto max-h-96">
        <!-- Visão Geral Tab -->
        <div id="conteudoVisaoGeral">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="bg-gray-800/50 rounded-xl p-6">
              <h4 class="text-lg font-semibold text-white mb-4">Resumo Financeiro</h4>
              <div class="space-y-4">
                <div class="flex justify-between">
                  <span class="text-gray-400">Valor Total:</span>
                  <span id="resumoValorTotal" class="text-white font-semibold">€0,00</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-400">Retorno Total:</span>
                  <span id="resumoRetornoTotal" class="text-green-400 font-semibold">0%</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-400">Número de Ativos:</span>
                  <span id="resumoNumAtivos" class="text-white font-semibold">0</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-400">Data de Criação:</span>
                  <span id="resumoDataCriacao" class="text-white font-semibold">-</span>
                </div>
              </div>
            </div>

            <div class="bg-gray-800/50 rounded-xl p-6">
              <h4 class="text-lg font-semibold text-white mb-4">Distribuição por Tipo</h4>
              <div class="space-y-3">
                <div class="flex justify-between items-center">
                  <span class="text-gray-400">Ações</span>
                  <div class="flex items-center gap-2">
                    <div class="w-16 bg-gray-700 rounded-full h-2">
                      <div class="bg-blue-500 h-2 rounded-full" style="width: 60%"></div>
                    </div>
                    <span class="text-white text-sm">60%</span>
                  </div>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-gray-400">ETFs</span>
                  <div class="flex items-center gap-2">
                    <div class="w-16 bg-gray-700 rounded-full h-2">
                      <div class="bg-green-500 h-2 rounded-full" style="width: 30%"></div>
                    </div>
                    <span class="text-white text-sm">30%</span>
                  </div>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-gray-400">Crypto</span>
                  <div class="flex items-center gap-2">
                    <div class="w-16 bg-gray-700 rounded-full h-2">
                      <div class="bg-yellow-500 h-2 rounded-full" style="width: 10%"></div>
                    </div>
                    <span class="text-white text-sm">10%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Ativos Tab -->
        <div id="conteudoAtivos" class="hidden">
          <div class="text-center py-8">
            <div class="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-8 h-8 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
              </svg>
            </div>
            <p class="text-gray-400">Nenhum ativo encontrado nesta carteira</p>
            <p class="text-gray-500 text-sm mt-2">Vá para a página de Ativos para adicionar investimentos</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Confirmação Apagar -->
  <div id="confirmarApagarModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
    <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl p-8 shadow-2xl w-full max-w-md mx-4">
      <div class="text-center">
        <div class="w-16 h-16 bg-red-500/10 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
          </svg>
        </div>
        <h3 class="text-xl font-bold text-white mb-2">Confirmar Exclusão</h3>
        <p class="text-gray-400 mb-6">Tem certeza que deseja apagar esta carteira? Esta ação não pode ser desfeita.</p>
        
        <div class="flex gap-3">
          <button id="cancelarApagarBtn" 
            class="flex-1 py-3 bg-gray-800 text-gray-300 rounded-xl hover:bg-gray-700 transition-colors">
            Cancelar
          </button>
          <button id="confirmarApagarBtn" 
            class="flex-1 py-3 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors">
            Apagar
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Notifications -->
  <div id="toast-container" class="fixed bottom-4 right-4 z-50 space-y-2"></div>
</div>

<script>
let carteiraAtualId = null;

// Toast notification function
function showToast(message, type = "info") {
  const toast = document.createElement("div");
  let iconSVG, bgClass;
  
  switch (type) {
    case "success":
      bgClass = "bg-green-500/10 border-green-500/20";
      iconSVG = `<svg class="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414L8.414 15l-4.121-4.121a1 1 0 111.414-1.414L8.414 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
      </svg>`;
      break;
    case "error":
      bgClass = "bg-red-500/10 border-red-500/20";
      iconSVG = `<svg class="w-5 h-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>`;
      break;
    default:
      bgClass = "bg-primary-500/10 border-primary-500/20";
      iconSVG = `<svg class="w-5 h-5 text-primary-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>`;
  }

  toast.className = `flex items-center p-4 space-x-3 ${bgClass} border backdrop-blur-xl rounded-xl shadow-lg text-white animate-slide-up`;
  toast.innerHTML = `${iconSVG}<div class="text-sm font-medium">${message}</div>`;

  document.getElementById("toast-container").appendChild(toast);

  setTimeout(() => {
    toast.classList.add("opacity-0", "transition-opacity", "duration-300");
    setTimeout(() => toast.remove(), 300);
  }, 3000);
}

// Modal functions
function abrirModal() {
  const modal = document.getElementById('novaCarteiraModal');
  modal.classList.remove('hidden');
  modal.classList.add('flex');
  document.getElementById('nomeCarteira').focus();
}

function fecharModal() {
  const modal = document.getElementById('novaCarteiraModal');
  modal.classList.add('hidden');
  modal.classList.remove('flex');
  document.getElementById('formNovaCarteira').reset();
}

function abrirModalDetalhes(carteiraId, nome, tipo, percentual, valor) {
  carteiraAtualId = carteiraId;
  
  document.getElementById('modalCarteiraNome').textContent = nome;
  document.getElementById('resumoValorTotal').textContent = valor || '€0,00';
  document.getElementById('resumoRetornoTotal').textContent = percentual || '0%';
  document.getElementById('resumoNumAtivos').textContent = '0';
  document.getElementById('resumoDataCriacao').textContent = new Date().toLocaleDateString('pt-PT');
  
  const modal = document.getElementById('detalhesCarteiraModal');
  modal.classList.remove('hidden');
  modal.classList.add('flex');
}

function fecharModalDetalhes() {
  const modal = document.getElementById('detalhesCarteiraModal');
  modal.classList.add('hidden');
  modal.classList.remove('flex');
  esconderEditarNome();
}

function mostrarEditarNome() {
  document.getElementById('editarNomeContainer').classList.remove('hidden');
  const nomeAtual = document.getElementById('modalCarteiraNome').textContent;
  document.getElementById('novoNomeCarteira').value = nomeAtual;
  document.getElementById('novoNomeCarteira').focus();
}

function esconderEditarNome() {
  document.getElementById('editarNomeContainer').classList.add('hidden');
  document.getElementById('novoNomeCarteira').value = '';
}

async function salvarNovoNome() {
  const novoNome = document.getElementById('novoNomeCarteira').value.trim();
  if (!novoNome) {
    showToast("Por favor, insira um nome válido.", "error");
    return;
  }

  try {
    const response = await fetch('/api/carteira/atualizar', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({
        id: carteiraAtualId,
        nome: novoNome
      })
    });

    if (!response.ok) throw new Error("Erro ao atualizar carteira.");

    document.getElementById('modalCarteiraNome').textContent = novoNome;
    esconderEditarNome();
    showToast("Nome da carteira atualizado com sucesso!", "success");
    carregarCarteiras();
  } catch (error) {
    console.error(error);
    showToast("Erro ao atualizar nome da carteira.", "error");
  }
}

function mostrarConfirmacaoApagar() {
  const modal = document.getElementById('confirmarApagarModal');
  modal.classList.remove('hidden');
  modal.classList.add('flex');
}

function esconderConfirmacaoApagar() {
  const modal = document.getElementById('confirmarApagarModal');
  modal.classList.add('hidden');
  modal.classList.remove('flex');
}

async function apagarCarteira() {
  try {
    const response = await fetch(`/api/carteira/apagar?carteiraId=${carteiraAtualId}`, {
      method: "DELETE",
      credentials: 'include'
    });

    if (!response.ok) throw new Error("Erro ao apagar carteira.");

    showToast("Carteira apagada com sucesso!", "success");
    esconderConfirmacaoApagar();
    fecharModalDetalhes();
    carregarCarteiras();
  } catch (error) {
    console.error(error);
    showToast("Erro ao apagar carteira.", "error");
  }
}

async function carregarCarteiras() {
  try {
    const response = await fetch("/api/carteira/ver?userIdFromCarteira=-1", {
      credentials: 'include'
    });

    if (!response.ok) throw new Error("Erro ao carregar carteiras.");

    const data = await response.json();
    const container = document.getElementById('carteirasContainer');
    const emptyState = document.getElementById('emptyState');
    
    container.innerHTML = '';

    if (!Array.isArray(data) || data.length === 0) {
      emptyState.classList.remove('hidden');
      document.getElementById('totalCarteiras').textContent = '0';
      return;
    }

    emptyState.classList.add('hidden');
    document.getElementById('totalCarteiras').textContent = data.length;

    const gradients = [
      'from-blue-500 to-purple-500',
      'from-green-500 to-teal-500',
      'from-yellow-500 to-orange-500',
      'from-purple-500 to-pink-500',
      'from-red-500 to-pink-500',
      'from-indigo-500 to-blue-500'
    ];

    const icons = ['💼', '📊', '💰', '📈', '🏦', '💎'];

    data.forEach((carteira, index) => {
      const nome = carteira.nome || "Nova Carteira";
      const tipo = carteira.tipo || "Mista";
      const percentual = carteira.percentual || "0%";
      const valor = carteira.valor || "€0,00";
      const isPositive = !percentual.startsWith('-');
      
      const gradient = gradients[index % gradients.length];
      const icon = icons[index % icons.length];

      const card = `
        <div class="bg-gray-900/50 backdrop-blur-xl border border-gray-800 rounded-2xl overflow-hidden hover:border-primary-500/30 transition-all duration-300 group cursor-pointer">
          <div class="relative h-32 bg-gradient-to-br ${gradient} p-6">
            <div class="absolute top-4 right-4">
              <span class="text-2xl">${icon}</span>
            </div>
            <div class="absolute bottom-4 left-6">
              <h3 class="text-xl font-bold text-white">${nome}</h3>
              <span class="text-white/80 text-sm">${tipo}</span>
            </div>
          </div>
          
          <div class="p-6">
            <div class="flex justify-between items-center mb-4">
              <div class="text-2xl font-bold text-white">${valor}</div>
              <div class="flex items-center gap-1">
                <svg class="w-4 h-4 ${isPositive ? 'text-green-400' : 'text-red-400'}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${isPositive ? 'M7 11l5-5m0 0l5 5m-5-5v12' : 'M17 13l-5 5m0 0l-5-5m5 5V6'}"/>
                </svg>
                <span class="${isPositive ? 'text-green-400' : 'text-red-400'} font-semibold">${percentual}</span>
              </div>
            </div>
            
            <button onclick="abrirModalDetalhes('${carteira.id}', '${nome}', '${tipo}', '${percentual}', '${valor}')"
              class="w-full py-2 bg-primary-600/20 hover:bg-primary-600/30 text-primary-400 rounded-lg transition-colors duration-200 text-sm font-medium">
              Ver Detalhes
            </button>
          </div>
        </div>
      `;

      container.insertAdjacentHTML('beforeend', card);
    });

    showToast("Carteiras carregadas com sucesso!", "success");
  } catch (error) {
    console.error(error);
    showToast("Erro ao carregar carteiras.", "error");
  }
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
  // Load portfolios on page load
  carregarCarteiras();

  // Modal event listeners
  document.getElementById('novaCarteiraBtn').addEventListener('click', abrirModal);
  document.getElementById('fecharModalBtn').addEventListener('click', fecharModal);
  document.getElementById('cancelarBtn').addEventListener('click', fecharModal);

  // Form submission
  document.getElementById('formNovaCarteira').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const nome = document.getElementById('nomeCarteira').value.trim();
    if (!nome) {
      showToast("Por favor, insira um nome para a carteira.", "error");
      return;
    }

    try {
      const response = await fetch('/api/carteira/adicionar', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          id: -1,
          userId: -1,
          nome: nome,
          tipo: "Mista",
          percentual: "0%",
          valor: "€0,00"
        })
      });

      if (!response.ok) throw new Error("Erro ao criar carteira.");

      showToast("Carteira criada com sucesso!", "success");
      fecharModal();
      carregarCarteiras();
    } catch (error) {
      console.error(error);
      showToast("Erro ao criar carteira.", "error");
    }
  });

  // Details modal event listeners
  document.getElementById('fecharDetalhesBtn').addEventListener('click', fecharModalDetalhes);
  document.getElementById('editarNomeBtn').addEventListener('click', mostrarEditarNome);
  document.getElementById('cancelarEditarNomeBtn').addEventListener('click', esconderEditarNome);
  document.getElementById('salvarNomeBtn').addEventListener('click', salvarNovoNome);
  document.getElementById('apagarCarteiraBtn').addEventListener('click', mostrarConfirmacaoApagar);

  // Delete confirmation modal
  document.getElementById('cancelarApagarBtn').addEventListener('click', esconderConfirmacaoApagar);
  document.getElementById('confirmarApagarBtn').addEventListener('click', apagarCarteira);

  // Tab switching
  document.getElementById('tabVisaoGeral').addEventListener('click', function() {
    document.getElementById('tabVisaoGeral').classList.add('text-primary-400', 'border-b-2', 'border-primary-400');
    document.getElementById('tabVisaoGeral').classList.remove('text-gray-400');
    document.getElementById('tabAtivos').classList.add('text-gray-400');
    document.getElementById('tabAtivos').classList.remove('text-primary-400', 'border-b-2', 'border-primary-400');
    
    document.getElementById('conteudoVisaoGeral').classList.remove('hidden');
    document.getElementById('conteudoAtivos').classList.add('hidden');
  });

  document.getElementById('tabAtivos').addEventListener('click', function() {
    document.getElementById('tabAtivos').classList.add('text-primary-400', 'border-b-2', 'border-primary-400');
    document.getElementById('tabAtivos').classList.remove('text-gray-400');
    document.getElementById('tabVisaoGeral').classList.add('text-gray-400');
    document.getElementById('tabVisaoGeral').classList.remove('text-primary-400', 'border-b-2', 'border-primary-400');
    
    document.getElementById('conteudoAtivos').classList.remove('hidden');
    document.getElementById('conteudoVisaoGeral').classList.add('hidden');
  });

  // Close modals when clicking outside
  document.getElementById('novaCarteiraModal').addEventListener('click', function(e) {
    if (e.target === this) fecharModal();
  });

  document.getElementById('detalhesCarteiraModal').addEventListener('click', function(e) {
    if (e.target === this) fecharModalDetalhes();
  });

  document.getElementById('confirmarApagarModal').addEventListener('click', function(e) {
    if (e.target === this) esconderConfirmacaoApagar();
  });
});
</script>
                                <span id="resumoValorTotal" class="font-bold">€0,00</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600 dark:text-gray-300">Retorno Total:</span>
                                <span id="resumoRetornoTotal" class="font-bold">€0,00 (0%)</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600 dark:text-gray-300">Número de Ativos:</span>
                                <span id="resumoNumAtivos" class="font-bold">0</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600 dark:text-gray-300">Data de Criação:</span>
                                <span id="resumoDataCriacao" class="font-bold">08/05/2025</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Gráfico de distribuição (placeholder) -->
                    <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-4 flex flex-col items-center justify-center">
                        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 self-start">Distribuição</h4>
                        <div class="text-center text-gray-500 dark:text-gray-400 py-8">
                            <svg class="w-12 h-12 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                            </svg>
                            <p>Adicione ativos à sua carteira para visualizar a distribuição</p>
                        </div>
                    </div>
                    
                    <!-- Desempenho ao longo do tempo (placeholder) -->
                    <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-4 col-span-1 md:col-span-2 flex flex-col items-center justify-center">
                        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 self-start">Desempenho</h4>
                        <div class="text-center text-gray-500 dark:text-gray-400 py-8">
                            <svg class="w-12 h-12 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
                            </svg>
                            <p>O histórico de desempenho aparecerá aqui quando houver dados suficientes</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Conteúdo da aba Ativos -->
            <div id="conteudoAtivos" class="p-6 overflow-y-auto flex-1 hidden">
                <div class="flex justify-between items-center mb-4">
                    <h4 class="text-lg font-semibold text-gray-800 dark:text-white">Ativos na Carteira</h4>
                    <button id="adicionarAtivoBtn" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Adicionar Ativo
                    </button>
                </div>
                
                <div id="semAtivosMsg" class="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg text-center">
                    <svg class="w-12 h-12 mx-auto text-blue-500 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <h5 class="text-lg font-medium text-gray-800 dark:text-white mb-2">Nenhum ativo encontrado</h5>
                    <p class="text-gray-600 dark:text-gray-400 mb-4">Esta carteira ainda não possui nenhum ativo. Adicione ativos para começar a acompanhar seu desempenho.</p>
                    <button class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded inline-flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Adicionar Primeiro Ativo
                    </button>
                </div>
                
                <div id="listaAtivos" class="hidden">
                    <div class="bg-white dark:bg-gray-700 shadow overflow-hidden rounded-lg">
                        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                            <thead class="bg-gray-50 dark:bg-gray-800">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Ativo</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Quantidade</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Preço</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Valor</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Variação</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Ações</th>
                                </tr>
                            </thead>
                            <tbody id="tabelaAtivos" class="bg-white dark:bg-gray-700 divide-y divide-gray-200 dark:divide-gray-600">
                                <!-- Aqui serão inseridos os ativos dinamicamente -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            
            <!-- Rodapé do modal -->
            <div class="bg-gray-100 dark:bg-gray-800 px-6 py-3 flex justify-end">
                <button id="fecharDetalhesModalBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200">
                    Fechar
                </button>
            </div>
        </div>
    </div>
    
    <!-- Modal de confirmação para apagar carteira -->
    <div id="confirmarApagarModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm items-center justify-center z-50 hidden">
        <div class="bg-gray-900/95 backdrop-blur-xl border border-gray-800 rounded-2xl p-8 shadow-2xl w-full max-w-md mx-4">
            <div class="mb-6">
                <h3 class="text-xl font-bold text-white mb-2">Confirmar Exclusão</h3>
                <p class="text-gray-400">Tem certeza que deseja apagar esta carteira? Esta ação não pode ser desfeita.</p>
            </div>
            <div class="flex gap-3">
                <button id="cancelarApagarBtn" class="flex-1 py-3 bg-gray-800 text-gray-300 rounded-xl hover:bg-gray-700 transition-colors duration-200">
                    Cancelar
                </button>
                <button id="confirmarApagarBtn" class="flex-1 py-3 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors duration-200">
                    Apagar
                </button>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toast-container" class="fixed bottom-4 right-4 z-50 space-y-2"></div>

<script>
  // Funções auxiliares
  function showToast(message, type = "info") {
    const toast = document.createElement("div");

    let iconSVG, iconColor;
    switch (type) {
      case "success":
        iconColor = "text-green-600 dark:text-green-500";
        iconSVG = `<svg class="w-5 h-5 ${iconColor}" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414L8.414 15l-4.121-4.121a1 1 0 111.414-1.414L8.414 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>`;
        break;
      case "error":
        iconColor = "text-red-600 dark:text-red-500";
        iconSVG = `<svg class="w-5 h-5 ${iconColor}" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>`;
        break;
      case "warning":
        iconColor = "text-yellow-600 dark:text-yellow-500";
        iconSVG = `<svg class="w-5 h-5 ${iconColor}" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.366-.446.998-.446 1.364 0l7.071 8.625c.329.401.05.986-.437.986H1.303c-.487 0-.766-.585-.437-.986l7.071-8.625zM11 14a1 1 0 10-2 0 1 1 0 002 0zm-.25-3.25a.75.75 0 01-1.5 0v-3a.75.75 0 011.5 0v3z" clip-rule="evenodd"/></svg>`;
        break;
      default:
        iconColor = "text-blue-600 dark:text-blue-500";
        iconSVG = `<svg class="w-5 h-5 ${iconColor}" fill="none" viewBox="0 0 18 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 17 8 2L9 1 1 19l8-2Zm0 0V9"/></svg>`;
    }

    toast.className = "flex items-center w-full max-w-xs p-4 space-x-4 text-gray-500 bg-white divide-x divide-gray-200 rounded-lg shadow-sm dark:text-gray-400 dark:divide-gray-700 dark:bg-gray-800";
    toast.innerHTML = `
      ${iconSVG}
      <div class="ps-4 text-sm font-normal">${message}</div>
    `;

    const container = document.getElementById("toast-container");
    container.appendChild(toast);

    setTimeout(() => {
      toast.classList.add("opacity-0", "transition-opacity", "duration-300");
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }
  
  // Função para abrir o modal
  function abrirModal() {
    const modal = document.getElementById('novaCarteiraModal');
    const nomeCarteiraInput = document.getElementById('nomeCarteira');
    modal.classList.remove('hidden');
    nomeCarteiraInput.value = '';
    nomeCarteiraInput.focus();
  }

  // Função para fechar o modal
  function fecharModal() {
    const modal = document.getElementById('novaCarteiraModal');
    modal.classList.add('hidden');
  }

  // Função para abrir o modal de detalhes da carteira
  function abrirModalDetalhes(carteiraId, nome, tipo, percentual, valor) {
    // Armazenar o ID da carteira atual para uso em operações
    window.carteiraAtualId = carteiraId;
    
    // Atualizar o título do modal com o nome da carteira
    document.getElementById('modalCarteiraNome').textContent = nome;
    
    // Preencher os dados do resumo
    document.getElementById('resumoValorTotal').textContent = valor || '€0,00';
    document.getElementById('resumoRetornoTotal').textContent = percentual || '0%';
    document.getElementById('resumoNumAtivos').textContent = '0'; // Assumindo que inicialmente não há ativos
    document.getElementById('resumoDataCriacao').textContent = '08/05/2025'; // Data atual como exemplo
    
    // Mostrar o modal
    const modal = document.getElementById('detalhesCarteiraModal');
    modal.classList.remove('hidden');
    // Adicionar animação de entrada
    modal.classList.add('modal-enter');
    setTimeout(() => {
      modal.classList.remove('modal-enter');
      modal.classList.add('modal-enter-active');
    }, 10);
  }
  
  // Função para fechar o modal de detalhes
  function fecharModalDetalhes() {
    const modal = document.getElementById('detalhesCarteiraModal');
    // Adicionar animação de saída
    modal.classList.remove('modal-enter-active');
    modal.classList.add('modal-exit');
    setTimeout(() => {
      modal.classList.remove('modal-exit');
      modal.classList.add('modal-exit-active');
      setTimeout(() => {
        modal.classList.add('hidden');
        modal.classList.remove('modal-exit-active');
        // Resetar o estado do modal
        document.getElementById('editarNomeContainer').classList.add('hidden');
        document.getElementById('tabVisaoGeral').click(); // Voltar para a aba de visão geral
      }, 300);
    }, 10);
  }
  
  // Função para mostrar o formulário de edição de nome
  function mostrarEditarNome() {
    const nomeAtual = document.getElementById('modalCarteiraNome').textContent;
    document.getElementById('novoNomeCarteira').value = nomeAtual;
    document.getElementById('editarNomeContainer').classList.remove('hidden');
  }
  
  // Função para esconder o formulário de edição de nome
  function esconderEditarNome() {
    document.getElementById('editarNomeContainer').classList.add('hidden');
  }
  
  // Função para salvar o novo nome da carteira
  async function salvarNovoNome() {
    const novoNome = document.getElementById('novoNomeCarteira').value.trim();
    
    if (!novoNome) {
      showToast("O nome da carteira é obrigatório.", "warning");
      return;
    }
    
    try {
      const response = await fetch(`/api/carteira/alterarNome`, {
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ 
          carteiraId: window.carteiraAtualId,
          nome: novoNome 
        })
      });
      
      if (!response.ok) {
        throw new Error("Erro ao atualizar carteira.");
      }
      
      // Atualizar o nome no modal
      document.getElementById('modalCarteiraNome').textContent = novoNome;
      
      // Ocultar o formulário de edição
      esconderEditarNome();
      
      showToast("Nome da carteira atualizado com sucesso!", "success");
      
      // Recarregar a lista de carteiras para refletir a mudança
      window.location.reload();
    } catch (error) {
      console.error(error);
      showToast("Erro ao atualizar nome da carteira.", "error");
    }
  }
  
  // Função para mostrar o modal de confirmação de exclusão
  function mostrarConfirmacaoApagar() {
    document.getElementById('confirmarApagarModal').classList.remove('hidden');
  }
  
  // Função para esconder o modal de confirmação de exclusão
  function esconderConfirmacaoApagar() {
    document.getElementById('confirmarApagarModal').classList.add('hidden');
  }
  
  // Função para apagar a carteira
  async function apagarCarteira() {
    try {
      const response = await fetch(`/api/carteira/apagar?carteiraId=${window.carteiraAtualId}`, {
        method: "DELETE",
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error("Erro ao apagar carteira.");
      }
      
      showToast("Carteira apagada com sucesso!", "success");
      
      // Fechar os modais
      esconderConfirmacaoApagar();
      fecharModalDetalhes();
      
      // Recarregar a página para atualizar a lista
      window.location.reload();
    } catch (error) {
      console.error(error);
      showToast("Erro ao apagar carteira.", "error");
    }
  }

  document.addEventListener('DOMContentLoaded', async () => {
    const container = document.getElementById('carteirasContainer');
    const fecharModalBtn = document.getElementById('fecharModalBtn');
    const cancelarBtn = document.getElementById('cancelarBtn');
    const salvarCarteiraBtn = document.getElementById('salvarCarteiraBtn');
    const nomeCarteiraInput = document.getElementById('nomeCarteira');
    const modal = document.getElementById('novaCarteiraModal');
    
    // Event listeners para o modal
    fecharModalBtn.addEventListener('click', fecharModal);
    cancelarBtn.addEventListener('click', fecharModal);
    
    // Fechar modal ao clicar fora dele
    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        fecharModal();
      }
    });

    // Salvar nova carteira (corrigindo o userId)
    salvarCarteiraBtn.addEventListener('click', async () => {
      const nome = nomeCarteiraInput.value.trim();
      
      if (!nome) {
        showToast("O nome da carteira é obrigatório.", "warning");
        return;
      }

      
      
      try {
        let userId = -1;
        
        
        const response = await fetch("/api/carteira/adicionar", {
          method: "PUT",
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({ 
            userId: userId, 
            nome: nome 
          })
        });
        
        if (!response.ok) {
          throw new Error("Erro ao criar carteira.");
        }
        
        showToast("Carteira criada com sucesso!", "success");
        fecharModal();
        
        // Recarregar a lista de carteiras
        window.location.reload();
      } catch (error) {
        console.error(error);
        showToast("Erro ao criar carteira.", "error");
      }
    });

    try {
      const response = await fetch("/api/carteira/ver?userIdFromCarteira=-1", {
        credentials: 'include'
      });

      if (!response.ok) throw new Error("Erro ao carregar carteiras.");

      const data = await response.json();

      if (!Array.isArray(data)) throw new Error("Resposta inesperada da API.");

      if (data.length === 0) {
        showToast("Nenhuma carteira encontrada.", "info");
        return;
      }

      data.forEach(carteira => { 
        const nome = carteira.nome ?? "Nova Carteira";
        const tipo = carteira.tipo ?? "Mista";
        const percentual = carteira.percentual ?? "0%";
        const valor = carteira.valor ?? "€0";
        const isPositive = !valor.startsWith('-');
        
        // Gera uma cor aleatória para o gradiente do card
        const gradients = [
          'from-blue-500 to-purple-500',
          'from-green-500 to-teal-500',
          'from-yellow-500 to-orange-500',
          'from-purple-500 to-pink-500',
          'from-red-500 to-pink-500',
          'from-indigo-500 to-blue-500'
        ];
        const gradient = gradients[Math.floor(Math.random() * gradients.length)];
        
        // Escolhe um ícone baseado no tipo de carteira
        const getIconByType = (type) => {
          switch(type.toLowerCase()) {
            case 'imobiliária': return '🏠';
            case 'ações': return '📈';
            case 'cripto': return '🪙';
            case 'mista': return '💰';
            case 'renda fixa': return '💼';
            default: return '📊';
          }
        };
        const icon = getIconByType(tipo);
        
        // Escolhe uma imagem aleatória para a carteira
        const images = [
          "https://www.tracado.pt/img/upload/moradia_ld1/gallery/vcr08---vista-piscina.jpg",
          "https://images.unsplash.com/photo-1579621970563-ebec7560ff3e?ixlib=rb-1.2.1&auto=format&fit=crop&w=1951&q=80",
          "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80",
          "https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80"
        ];
        const imageUrl = images[Math.floor(Math.random() * images.length)];

        // Status badges diferentes baseados no desempenho
        const statusBadge = isPositive ? 
            `<span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded-full dark:bg-green-900 dark:text-green-300 ml-2">Em alta</span>` : 
            `<span class="bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded-full dark:bg-red-900 dark:text-red-300 ml-2">Em queda</span>`;

        // Arrow SVG baseado no valor positivo ou negativo
        const arrowSvg = isPositive ?
            `<svg class="w-5 h-5 text-green-500 dark:text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
            </svg>` :
            `<svg class="w-5 h-5 text-red-500 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
            </svg>`;

        // Modificar o botão "Ver detalhes" para chamar a função abrirModalDetalhes com os dados da carteira
        const verDetalhesBtn = `
          <button class="ver-detalhes-btn text-sm text-blue-600 dark:text-blue-400 hover:underline font-medium flex items-center">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
              Ver detalhes
          </button>
        `;

        const card = `
        <div class="carteira-card group bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm overflow-hidden hover:shadow-lg" data-carteira-id="${carteira.id}">
            <div class="relative overflow-hidden h-40">
                <div class="absolute inset-0 bg-gradient-to-br ${gradient} opacity-75"></div>
                <img class="card-image absolute inset-0 object-cover w-full h-full mix-blend-overlay opacity-90" src="${imageUrl}" alt="${nome}">
                <div class="relative z-10 flex items-center justify-between p-4">
                    <span class="text-4xl">${icon}</span>
                    <span class="stats-badge bg-white/90 dark:bg-gray-800/90 text-gray-800 text-xs font-medium px-2.5 py-1 rounded-md dark:text-gray-300 border border-gray-200 dark:border-gray-700">${tipo}</span>
                </div>
                <div class="absolute bottom-0 left-0 right-0 p-4">
                    <h3 class="text-xl font-bold text-white dark:text-white drop-shadow-md">${nome}</h3>
                </div>
            </div>
            
            <div class="p-5">
                <div class="flex items-center justify-between mb-2">
                    <div class="flex items-center">
                        ${arrowSvg}
                        <span class="ml-1 text-sm text-gray-600 dark:text-gray-400">${percentual}</span>
                        ${statusBadge}
                    </div>
                    <span class="text-xl font-bold ${isPositive ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}">${valor}</span>
                </div>
                
                <div class="mt-4 flex justify-between items-center">
                    ${verDetalhesBtn}
                    <div class="text-xs text-gray-500 dark:text-gray-400">Atualizado: hoje</div>
                </div>
            </div>
        </div>
        `;

        container.insertAdjacentHTML('beforeend', card);
      });

      // Adicionar event listeners para todos os botões "Ver detalhes"
      document.querySelectorAll('.ver-detalhes-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          // Buscar o elemento pai mais próximo com a classe carteira-card
          const carteiraCard = e.currentTarget.closest('.carteira-card');
          const carteiraId = carteiraCard.dataset.carteiraId;
          
          // Obter os dados da carteira
          const nome = carteiraCard.querySelector('h3').textContent;
          const tipo = carteiraCard.querySelector('.stats-badge').textContent;
          const percentual = carteiraCard.querySelector('.text-sm.text-gray-600').textContent;
          const valor = carteiraCard.querySelector('.text-xl.font-bold').textContent;
          
          // Abrir o modal de detalhes
          abrirModalDetalhes(carteiraId, nome, tipo, percentual, valor);
        });
      });

      showToast("Carteiras carregadas com sucesso!", "success");
    } catch (error) {
      console.error(error);
      showToast("Erro ao carregar carteiras.", "error");
    }

    // Event listeners para tabs do modal de detalhes
    const tabVisaoGeral = document.getElementById('tabVisaoGeral');
    const tabAtivos = document.getElementById('tabAtivos');
    const conteudoVisaoGeral = document.getElementById('conteudoVisaoGeral');
    const conteudoAtivos = document.getElementById('conteudoAtivos');
    
    tabVisaoGeral.addEventListener('click', () => {
      // Ativar a tab de visão geral
      tabVisaoGeral.classList.add('tab-active');
      tabAtivos.classList.remove('tab-active');
      
      // Mostrar o conteúdo da visão geral
      conteudoVisaoGeral.classList.remove('hidden');
      conteudoAtivos.classList.add('hidden');
    });
    
    tabAtivos.addEventListener('click', () => {
      // Ativar a tab de ativos
      tabAtivos.classList.add('tab-active');
      tabVisaoGeral.classList.remove('tab-active');
      
      // Mostrar o conteúdo de ativos
      conteudoAtivos.classList.remove('hidden');
      conteudoVisaoGeral.classList.add('hidden');
    });
    
    // Event listeners para o modal de detalhes
    document.getElementById('fecharDetalhesBtn').addEventListener('click', fecharModalDetalhes);
    document.getElementById('fecharDetalhesModalBtn').addEventListener('click', fecharModalDetalhes);
    
    // Event listeners para edição de nome
    document.getElementById('editarNomeBtn').addEventListener('click', mostrarEditarNome);
    document.getElementById('cancelarEditarNomeBtn').addEventListener('click', esconderEditarNome);
    document.getElementById('salvarNomeBtn').addEventListener('click', salvarNovoNome);
    
    // Event listeners para apagar carteira
    document.getElementById('apagarCarteiraBtn').addEventListener('click', mostrarConfirmacaoApagar);
    document.getElementById('cancelarApagarBtn').addEventListener('click', esconderConfirmacaoApagar);
    document.getElementById('confirmarApagarBtn').addEventListener('click', apagarCarteira);
  });

</script>

</body>
</html>
